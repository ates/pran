%%% Do not modify this file, it is automatically generated by abnfc.
%%% All changes will be lost when it is regenerated.
%%% Generated by abnfc_gen on 2010-12-08 16:56:55

-module(rfc2806).

-export(['accepted-modem'/0, 'area-specifier'/0,
	 'base-phone-number'/0, 'data-bits'/0,
	 'data-capabilities'/0, decode/2, 'dtmf-digit'/0,
	 'fax-global-phone'/0, 'fax-local-phone'/0,
	 'fax-scheme'/0, 'fax-subscriber'/0, 'fax-url'/0,
	 'future-extension'/0, 'global-network-prefix'/0,
	 'global-phone-number'/0, 'isdn-subaddress'/0,
	 'local-network-prefix'/0, 'local-phone-number'/0,
	 'modem-params'/0, 'modem-scheme'/0, 'modem-type'/0,
	 'modem-url'/0, 'network-prefix'/0, 'one-second-pause'/0,
	 parity/0, 'pause-character'/0, 'phone-context-ident'/0,
	 'phone-context-tag'/0, phonedigit/0, 'post-dial'/0,
	 'private-prefix'/0, 'provider-hostname'/0,
	 'provider-tag'/0, 'quoted-string'/0,
	 'recommended-params'/0, 'remote-host'/0,
	 'service-provider'/0, 'stop-bits'/0, 't33-subaddress'/0,
	 'telephone-scheme'/0, 'telephone-subscriber'/0,
	 'telephone-url'/0, 'token-char'/0, 'vendor-name'/0,
	 'visual-separator'/0, 'wait-for-dial-tone'/0]).

-include("rfc2806.hrl").

decode('telephone-url', Str) ->
    ('telephone-url'())(Str);
decode('telephone-scheme', Str) ->
    ('telephone-scheme'())(Str);
decode('telephone-subscriber', Str) ->
    ('telephone-subscriber'())(Str);
decode('global-phone-number', Str) ->
    ('global-phone-number'())(Str);
decode('base-phone-number', Str) ->
    ('base-phone-number'())(Str);
decode('local-phone-number', Str) ->
    ('local-phone-number'())(Str);
decode('isdn-subaddress', Str) ->
    ('isdn-subaddress'())(Str);
decode('post-dial', Str) -> ('post-dial'())(Str);
decode('area-specifier', Str) ->
    ('area-specifier'())(Str);
decode('phone-context-tag', Str) ->
    ('phone-context-tag'())(Str);
decode('phone-context-ident', Str) ->
    ('phone-context-ident'())(Str);
decode('network-prefix', Str) ->
    ('network-prefix'())(Str);
decode('global-network-prefix', Str) ->
    ('global-network-prefix'())(Str);
decode('local-network-prefix', Str) ->
    ('local-network-prefix'())(Str);
decode('private-prefix', Str) ->
    ('private-prefix'())(Str);
decode('service-provider', Str) ->
    ('service-provider'())(Str);
decode('provider-tag', Str) -> ('provider-tag'())(Str);
decode('provider-hostname', Str) ->
    ('provider-hostname'())(Str);
decode('future-extension', Str) ->
    ('future-extension'())(Str);
decode('token-char', Str) -> ('token-char'())(Str);
decode('quoted-string', Str) ->
    ('quoted-string'())(Str);
decode(phonedigit, Str) -> (phonedigit())(Str);
decode('visual-separator', Str) ->
    ('visual-separator'())(Str);
decode('pause-character', Str) ->
    ('pause-character'())(Str);
decode('one-second-pause', Str) ->
    ('one-second-pause'())(Str);
decode('wait-for-dial-tone', Str) ->
    ('wait-for-dial-tone'())(Str);
decode('dtmf-digit', Str) -> ('dtmf-digit'())(Str);
decode('fax-url', Str) -> ('fax-url'())(Str);
decode('fax-scheme', Str) -> ('fax-scheme'())(Str);
decode('fax-subscriber', Str) ->
    ('fax-subscriber'())(Str);
decode('fax-global-phone', Str) ->
    ('fax-global-phone'())(Str);
decode('fax-local-phone', Str) ->
    ('fax-local-phone'())(Str);
decode('t33-subaddress', Str) ->
    ('t33-subaddress'())(Str);
decode('modem-url', Str) -> ('modem-url'())(Str);
decode('modem-scheme', Str) -> ('modem-scheme'())(Str);
decode('remote-host', Str) -> ('remote-host'())(Str);
decode('modem-params', Str) -> ('modem-params'())(Str);
decode('recommended-params', Str) ->
    ('recommended-params'())(Str);
decode('data-capabilities', Str) ->
    ('data-capabilities'())(Str);
decode('accepted-modem', Str) ->
    ('accepted-modem'())(Str);
decode('data-bits', Str) -> ('data-bits'())(Str);
decode(parity, Str) -> (parity())(Str);
decode('stop-bits', Str) -> ('stop-bits'())(Str);
decode('vendor-name', Str) -> ('vendor-name'())(Str);
decode('modem-type', Str) -> ('modem-type'())(Str).

'telephone-url'() ->
    fun (T) ->
	    __P = '__seq'(['telephone-scheme'(),
			   fun (<<58, Tl/binary>>) -> {ok, 58, Tl};
			       (_) -> fail
			   end,
			   'telephone-subscriber'()]),
	    __P(T)
    end.

'telephone-scheme'() ->
    fun (T) ->
	    __P = fun (<<C1, C2, C3, Tl/binary>>)
			  when (C1 == 116) or (C1 == 84),
			       (C2 == 101) or (C2 == 69), (C3 == 108) or (C3 == 76) ->
			  {ok, [C1, C2, C3], Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

'telephone-subscriber'() ->
    fun (T) ->
	    __P = '__alt'(['global-phone-number'(),
			   'local-phone-number'()]),
	    __P(T)
    end.

'global-phone-number'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<43, Tl/binary>>) -> {ok, 43, Tl};
			       (_) -> fail
			   end,
			   'base-phone-number'(),
			   '__repeat'(0, 1, 'isdn-subaddress'()),
			   '__repeat'(0, 1, 'post-dial'()),
			   '__repeat'(0, infinity,
				      '__alt'(['area-specifier'(), 'service-provider'(),
					       'future-extension'()]))]),
	    __P(T)
    end.

'base-phone-number'() ->
    fun (T) ->
	    __P = '__repeat'(1, infinity, phonedigit()), __P(T)
    end.

'local-phone-number'() ->
    fun (T) ->
	    __P = '__seq'(['__repeat'(1, infinity,
				      '__alt'([phonedigit(), 'dtmf-digit'(),
					       'pause-character'()])),
			   '__repeat'(0, 1, 'isdn-subaddress'()),
			   '__repeat'(0, 1, 'post-dial'()), 'area-specifier'(),
			   '__repeat'(0, infinity,
				      '__alt'(['area-specifier'(), 'service-provider'(),
					       'future-extension'()]))]),
	    __P(T)
    end.

'isdn-subaddress'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6,
				  Tl/binary>>)
				   when C1 == 59, (C2 == 105) or (C2 == 73),
					(C3 == 115) or (C3 == 83), (C4 == 117) or (C4 == 85),
					(C5 == 98) or (C5 == 66), C6 == 61 ->
				   {ok, [C1, C2, C3, C4, C5, C6], Tl};
			       (_) -> fail
			   end,
			   '__repeat'(1, infinity, phonedigit())]),
	    __P(T)
    end.

'post-dial'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7,
				  Tl/binary>>)
				   when C1 == 59, (C2 == 112) or (C2 == 80),
					(C3 == 111) or (C3 == 79), (C4 == 115) or (C4 == 83),
					(C5 == 116) or (C5 == 84), (C6 == 100) or (C6 == 68),
					C7 == 61 ->
				   {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
			       (_) -> fail
			   end,
			   '__repeat'(1, infinity,
				      '__alt'([phonedigit(), 'dtmf-digit'(),
					       'pause-character'()]))]),
	    __P(T)
    end.

'area-specifier'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<59, Tl/binary>>) -> {ok, 59, Tl};
			       (_) -> fail
			   end,
			   'phone-context-tag'(),
			   fun (<<61, Tl/binary>>) -> {ok, 61, Tl};
			       (_) -> fail
			   end,
			   'phone-context-ident'()]),
	    __P(T)
    end.

'phone-context-tag'() ->
    fun (T) ->
	    __P = fun (<<C1, C2, C3, C4, C5, C6, C7, C8, C9, C10,
			 C11, C12, C13, Tl/binary>>)
			  when (C1 == 112) or (C1 == 80),
			       (C2 == 104) or (C2 == 72), (C3 == 111) or (C3 == 79),
			       (C4 == 110) or (C4 == 78), (C5 == 101) or (C5 == 69),
			       C6 == 45, (C7 == 99) or (C7 == 67),
			       (C8 == 111) or (C8 == 79), (C9 == 110) or (C9 == 78),
			       (C10 == 116) or (C10 == 84),
			       (C11 == 101) or (C11 == 69),
			       (C12 == 120) or (C12 == 88),
			       (C13 == 116) or (C13 == 84) ->
			  {ok,
			   [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12,
			    C13],
			   Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

'phone-context-ident'() ->
    fun (T) ->
	    __P = '__alt'(['network-prefix'(), 'private-prefix'()]),
	    __P(T)
    end.

'network-prefix'() ->
    fun (T) ->
	    __P = '__alt'(['global-network-prefix'(),
			   'local-network-prefix'()]),
	    __P(T)
    end.

'global-network-prefix'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<43, Tl/binary>>) -> {ok, 43, Tl};
			       (_) -> fail
			   end,
			   '__repeat'(1, infinity, phonedigit())]),
	    __P(T)
    end.

'local-network-prefix'() ->
    fun (T) ->
	    __P = '__repeat'(1, infinity,
			     '__alt'([phonedigit(), 'dtmf-digit'(),
				      'pause-character'()])),
	    __P(T)
    end.

'private-prefix'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C, Tl/binary>>) when C == 44 ->
				   {ok, C, Tl};
			       (<<C, Tl/binary>>) when C == 47 -> {ok, C, Tl};
			       (<<C, Tl/binary>>) when C == 58 -> {ok, C, Tl};
			       (<<C, Tl/binary>>) when (C >= 33) and (C =< 34) ->
				   {ok, C, Tl};
			       (<<C, Tl/binary>>) when (C >= 36) and (C =< 39) ->
				   {ok, C, Tl};
			       (<<C, Tl/binary>>) when (C >= 60) and (C =< 64) ->
				   {ok, C, Tl};
			       (<<C, Tl/binary>>) when (C >= 69) and (C =< 79) ->
				   {ok, C, Tl};
			       (<<C, Tl/binary>>) when (C >= 81) and (C =< 86) ->
				   {ok, C, Tl};
			       (<<C, Tl/binary>>) when (C >= 88) and (C =< 96) ->
				   {ok, C, Tl};
			       (<<C, Tl/binary>>) when (C >= 101) and (C =< 111) ->
				   {ok, C, Tl};
			       (<<C, Tl/binary>>) when (C >= 113) and (C =< 118) ->
				   {ok, C, Tl};
			       (<<C, Tl/binary>>) when (C >= 120) and (C =< 126) ->
				   {ok, C, Tl};
			       (_) -> fail
			   end,
			   '__repeat'(0, infinity,
				      fun (<<C, Tl/binary>>) when (C >= 33) and (C =< 58) ->
					      {ok, C, Tl};
					  (<<C, Tl/binary>>) when (C >= 60) and (C =< 126) ->
					      {ok, C, Tl};
					  (_) -> fail
				      end)]),
	    __P(T)
    end.

'service-provider'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<59, Tl/binary>>) -> {ok, 59, Tl};
			       (_) -> fail
			   end,
			   'provider-tag'(),
			   fun (<<61, Tl/binary>>) -> {ok, 61, Tl};
			       (_) -> fail
			   end,
			   'provider-hostname'()]),
	    __P(T)
    end.

'provider-tag'() ->
    fun (T) ->
	    __P = fun (<<C1, C2, C3, Tl/binary>>)
			  when (C1 == 116) or (C1 == 84),
			       (C2 == 115) or (C2 == 83), (C3 == 112) or (C3 == 80) ->
			  {ok, [C1, C2, C3], Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

'provider-hostname'() ->
    fun (T) -> __P = domain(), __P(T) end.

'future-extension'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<59, Tl/binary>>) -> {ok, 59, Tl};
			       (_) -> fail
			   end,
			   '__repeat'(1, infinity, 'token-char'()),
			   '__repeat'(0, 1,
				      '__seq'([fun (<<61, Tl/binary>>) -> {ok, 61, Tl};
						   (_) -> fail
					       end,
					       '__alt'(['__seq'(['__repeat'(1, infinity,
									    'token-char'()),
								 '__repeat'(0, 1,
									    '__seq'([fun (<<63,
											    Tl/binary>>) ->
											     {ok,
											      63,
											      Tl};
											 (_) ->
											     fail
										     end,
										     '__repeat'(1,
												infinity,
												'token-char'())]))]),
							'quoted-string'()])]))]),
	    __P(T)
    end.

'token-char'() ->
    fun (T) ->
	    __P = fun (<<C, Tl/binary>>) when C == 33 ->
			  {ok, C, Tl};
		      (<<C, Tl/binary>>) when C == 124 -> {ok, C, Tl};
		      (<<C, Tl/binary>>) when C == 126 -> {ok, C, Tl};
		      (<<C, Tl/binary>>) when (C >= 35) and (C =< 39) ->
			  {ok, C, Tl};
		      (<<C, Tl/binary>>) when (C >= 42) and (C =< 43) ->
			  {ok, C, Tl};
		      (<<C, Tl/binary>>) when (C >= 45) and (C =< 46) ->
			  {ok, C, Tl};
		      (<<C, Tl/binary>>) when (C >= 48) and (C =< 57) ->
			  {ok, C, Tl};
		      (<<C, Tl/binary>>) when (C >= 65) and (C =< 90) ->
			  {ok, C, Tl};
		      (<<C, Tl/binary>>) when (C >= 94) and (C =< 122) ->
			  {ok, C, Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

'quoted-string'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<34, Tl/binary>>) -> {ok, 34, Tl};
			       (_) -> fail
			   end,
			   '__repeat'(0, infinity,
				      '__alt'(['__seq'([fun (<<92, Tl/binary>>) ->
								{ok, 92, Tl};
							    (_) -> fail
							end,
							'CHAR'()]),
					       fun (<<C, Tl/binary>>)
						       when (C >= 32) and (C =< 33) ->
						       {ok, C, Tl};
						   (<<C, Tl/binary>>)
						       when (C >= 35) and (C =< 126) ->
						       {ok, C, Tl};
						   (<<C, Tl/binary>>)
						       when (C >= 128) and (C =< 255) ->
						       {ok, C, Tl};
						   (_) -> fail
					       end])),
			   fun (<<34, Tl/binary>>) -> {ok, 34, Tl};
			       (_) -> fail
			   end]),
	    __P(T)
    end.

phonedigit() ->
    fun (T) ->
	    __P = '__alt'(['DIGIT'(), 'visual-separator'()]), __P(T)
    end.

'visual-separator'() ->
    fun (T) ->
	    __P = fun (<<C, Tl/binary>>)
			  when (C >= 40) and (C =< 41) ->
			  {ok, C, Tl};
		      (<<C, Tl/binary>>) when (C >= 45) and (C =< 46) ->
			  {ok, C, Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

'pause-character'() ->
    fun (T) ->
	    __P = '__alt'(['one-second-pause'(),
			   'wait-for-dial-tone'()]),
	    __P(T)
    end.

'one-second-pause'() ->
    fun (T) ->
	    __P = fun (<<C, Tl/binary>>) when C == 112 ->
			  {ok, C, Tl};
		      (<<C, Tl/binary>>) when C == 80 -> {ok, C, Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

'wait-for-dial-tone'() ->
    fun (T) ->
	    __P = fun (<<C, Tl/binary>>) when C == 119 ->
			  {ok, C, Tl};
		      (<<C, Tl/binary>>) when C == 87 -> {ok, C, Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

'dtmf-digit'() ->
    fun (T) ->
	    __P = '__alt'([fun (<<C, Tl/binary>>) when C == 35 ->
				   {ok, C, Tl};
			       (<<C, Tl/binary>>) when C == 42 -> {ok, C, Tl};
			       (_) -> fail
			   end,
			   fun (<<C, Tl/binary>>) when C == 97 -> {ok, C, Tl};
			       (<<C, Tl/binary>>) when C == 65 -> {ok, C, Tl};
			       (_) -> fail
			   end,
			   fun (<<C, Tl/binary>>) when C == 98 -> {ok, C, Tl};
			       (<<C, Tl/binary>>) when C == 66 -> {ok, C, Tl};
			       (_) -> fail
			   end,
			   fun (<<C, Tl/binary>>) when C == 99 -> {ok, C, Tl};
			       (<<C, Tl/binary>>) when C == 67 -> {ok, C, Tl};
			       (_) -> fail
			   end,
			   fun (<<C, Tl/binary>>) when C == 100 -> {ok, C, Tl};
			       (<<C, Tl/binary>>) when C == 68 -> {ok, C, Tl};
			       (_) -> fail
			   end]),
	    __P(T)
    end.

'fax-url'() ->
    fun (T) ->
	    __P = '__seq'(['fax-scheme'(),
			   fun (<<58, Tl/binary>>) -> {ok, 58, Tl};
			       (_) -> fail
			   end,
			   'fax-subscriber'()]),
	    __P(T)
    end.

'fax-scheme'() ->
    fun (T) ->
	    __P = fun (<<C1, C2, C3, Tl/binary>>)
			  when (C1 == 102) or (C1 == 70),
			       (C2 == 97) or (C2 == 65), (C3 == 120) or (C3 == 88) ->
			  {ok, [C1, C2, C3], Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

'fax-subscriber'() ->
    fun (T) ->
	    __P = '__alt'(['fax-global-phone'(),
			   'fax-local-phone'()]),
	    __P(T)
    end.

'fax-global-phone'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<43, Tl/binary>>) -> {ok, 43, Tl};
			       (_) -> fail
			   end,
			   'base-phone-number'(),
			   '__repeat'(0, 1, 'isdn-subaddress'()),
			   '__repeat'(0, 1, 't33-subaddress'()),
			   '__repeat'(0, 1, 'post-dial'()),
			   '__repeat'(0, infinity,
				      '__alt'(['area-specifier'(), 'service-provider'(),
					       'future-extension'()]))]),
	    __P(T)
    end.

'fax-local-phone'() ->
    fun (T) ->
	    __P = '__seq'(['__repeat'(1, infinity,
				      '__alt'([phonedigit(), 'dtmf-digit'(),
					       'pause-character'()])),
			   '__repeat'(0, 1, 'isdn-subaddress'()),
			   '__repeat'(0, 1, 't33-subaddress'()),
			   '__repeat'(0, 1, 'post-dial'()), 'area-specifier'(),
			   '__repeat'(0, infinity,
				      '__alt'(['area-specifier'(), 'service-provider'(),
					       'future-extension'()]))]),
	    __P(T)
    end.

't33-subaddress'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6,
				  Tl/binary>>)
				   when C1 == 59, (C2 == 116) or (C2 == 84),
					(C3 == 115) or (C3 == 83), (C4 == 117) or (C4 == 85),
					(C5 == 98) or (C5 == 66), C6 == 61 ->
				   {ok, [C1, C2, C3, C4, C5, C6], Tl};
			       (_) -> fail
			   end,
			   '__repeat'(1, infinity, phonedigit())]),
	    __P(T)
    end.

'modem-url'() ->
    fun (T) ->
	    __P = '__seq'(['modem-scheme'(),
			   fun (<<58, Tl/binary>>) -> {ok, 58, Tl};
			       (_) -> fail
			   end,
			   'remote-host'()]),
	    __P(T)
    end.

'modem-scheme'() ->
    fun (T) ->
	    __P = fun (<<C1, C2, C3, C4, C5, Tl/binary>>)
			  when (C1 == 109) or (C1 == 77),
			       (C2 == 111) or (C2 == 79), (C3 == 100) or (C3 == 68),
			       (C4 == 101) or (C4 == 69), (C5 == 109) or (C5 == 77) ->
			  {ok, [C1, C2, C3, C4, C5], Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

'remote-host'() ->
    fun (T) ->
	    __P = '__seq'(['telephone-subscriber'(),
			   '__repeat'(0, infinity,
				      '__alt'(['modem-params'(), 'recommended-params'()]))]),
	    __P(T)
    end.

'modem-params'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6,
				  Tl/binary>>)
				   when C1 == 59, (C2 == 116) or (C2 == 84),
					(C3 == 121) or (C3 == 89), (C4 == 112) or (C4 == 80),
					(C5 == 101) or (C5 == 69), C6 == 61 ->
				   {ok, [C1, C2, C3, C4, C5, C6], Tl};
			       (_) -> fail
			   end,
			   'data-capabilities'()]),
	    __P(T)
    end.

'recommended-params'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, Tl/binary>>)
				   when C1 == 59, (C2 == 114) or (C2 == 82),
					(C3 == 101) or (C3 == 69), (C4 == 99) or (C4 == 67),
					C5 == 61 ->
				   {ok, [C1, C2, C3, C4, C5], Tl};
			       (_) -> fail
			   end,
			   'data-capabilities'()]),
	    __P(T)
    end.

'data-capabilities'() ->
    fun (T) ->
	    __P = '__seq'(['accepted-modem'(),
			   '__repeat'(0, 1,
				      '__seq'([fun (<<63, Tl/binary>>) -> {ok, 63, Tl};
						   (_) -> fail
					       end,
					       'data-bits'(), parity(), 'stop-bits'()]))]),
	    __P(T)
    end.

'accepted-modem'() ->
    fun (T) ->
	    __P = '__alt'([fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 118) or (C1 == 86), C2 == 50, C3 == 49 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 118) or (C1 == 86), C2 == 50, C3 == 50 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, C4, Tl/binary>>)
				   when (C1 == 118) or (C1 == 86), C2 == 50, C3 == 50,
					(C4 == 98) or (C4 == 66) ->
				   {ok, [C1, C2, C3, C4], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 118) or (C1 == 86), C2 == 50, C3 == 51 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, C4, Tl/binary>>)
				   when (C1 == 118) or (C1 == 86), C2 == 50, C3 == 54,
					(C4 == 116) or (C4 == 84) ->
				   {ok, [C1, C2, C3, C4], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 118) or (C1 == 86), C2 == 51, C3 == 50 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, C4, Tl/binary>>)
				   when (C1 == 118) or (C1 == 86), C2 == 51, C3 == 50,
					(C4 == 98) or (C4 == 66) ->
				   {ok, [C1, C2, C3, C4], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 118) or (C1 == 86), C2 == 51, C3 == 52 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 118) or (C1 == 86), C2 == 57, C3 == 48 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, C4, Tl/binary>>)
				   when (C1 == 118) or (C1 == 86), C2 == 49, C3 == 49,
					C4 == 48 ->
				   {ok, [C1, C2, C3, C4], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, C4, Tl/binary>>)
				   when (C1 == 118) or (C1 == 86), C2 == 49, C3 == 50,
					C4 == 48 ->
				   {ok, [C1, C2, C3, C4], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, C4, Tl/binary>>)
				   when (C1 == 98) or (C1 == 66), C2 == 49, C3 == 48,
					C4 == 51 ->
				   {ok, [C1, C2, C3, C4], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, C4, Tl/binary>>)
				   when (C1 == 98) or (C1 == 66), C2 == 50, C3 == 49,
					C4 == 50 ->
				   {ok, [C1, C2, C3, C4], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 120) or (C1 == 88), C2 == 55, C3 == 53 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   '__seq'([fun (<<C1, C2, C3, C4, Tl/binary>>)
					    when (C1 == 118) or (C1 == 86),
						 (C2 == 110) or (C2 == 78),
						 (C3 == 100) or (C3 == 68), C4 == 46 ->
					    {ok, [C1, C2, C3, C4], Tl};
					(_) -> fail
				    end,
				    'vendor-name'(),
				    fun (<<46, Tl/binary>>) -> {ok, 46, Tl};
					(_) -> fail
				    end,
				    'modem-type'()])]),
	    __P(T)
    end.

'data-bits'() ->
    fun (T) ->
	    __P = fun (<<C, Tl/binary>>)
			  when (C >= 55) and (C =< 56) ->
			  {ok, C, Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

parity() ->
    fun (T) ->
	    __P = '__alt'([fun (<<C, Tl/binary>>) when C == 110 ->
				   {ok, C, Tl};
			       (<<C, Tl/binary>>) when C == 78 -> {ok, C, Tl};
			       (_) -> fail
			   end,
			   fun (<<C, Tl/binary>>) when C == 101 -> {ok, C, Tl};
			       (<<C, Tl/binary>>) when C == 69 -> {ok, C, Tl};
			       (_) -> fail
			   end,
			   fun (<<C, Tl/binary>>) when C == 111 -> {ok, C, Tl};
			       (<<C, Tl/binary>>) when C == 79 -> {ok, C, Tl};
			       (_) -> fail
			   end,
			   fun (<<C, Tl/binary>>) when C == 109 -> {ok, C, Tl};
			       (<<C, Tl/binary>>) when C == 77 -> {ok, C, Tl};
			       (_) -> fail
			   end,
			   fun (<<C, Tl/binary>>) when C == 115 -> {ok, C, Tl};
			       (<<C, Tl/binary>>) when C == 83 -> {ok, C, Tl};
			       (_) -> fail
			   end]),
	    __P(T)
    end.

'stop-bits'() ->
    fun (T) ->
	    __P = fun (<<C, Tl/binary>>)
			  when (C >= 49) and (C =< 50) ->
			  {ok, C, Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

'vendor-name'() ->
    fun (T) ->
	    __P = '__repeat'(1, infinity,
			     '__alt'([fun (<<C, Tl/binary>>) when C == 43 ->
					      {ok, C, Tl};
					  (<<C, Tl/binary>>) when C == 45 -> {ok, C, Tl};
					  (_) -> fail
				      end,
				      'ALPHA'(), 'DIGIT'()])),
	    __P(T)
    end.

'modem-type'() ->
    fun (T) ->
	    __P = '__repeat'(1, infinity,
			     '__alt'([fun (<<C, Tl/binary>>) when C == 43 ->
					      {ok, C, Tl};
					  (<<C, Tl/binary>>) when C == 45 -> {ok, C, Tl};
					  (_) -> fail
				      end,
				      'ALPHA'(), 'DIGIT'()])),
	    __P(T)
    end.

'__alt'([P | Ps]) ->
    fun (T) ->
	    case P(T) of
	      {ok, _R, _T1} = Res -> Res;
	      fail ->
		  case Ps of
		    [] -> fail;
		    _ -> ('__alt'(Ps))(T)
		  end
	    end
    end.

'__repeat'(Min, Max, P) -> '__repeat'(Min, Max, P, 0).

'__repeat'(Min, Max, P, Found) ->
    fun (T) ->
	    case P(T) of
	      {ok, R1, T1} when Max == Found + 1 -> {ok, [R1], T1};
	      {ok, R1, T1} ->
		  case ('__repeat'(Min, Max, P, Found + 1))(T1) of
		    {ok, R2, T2} -> {ok, [R1 | R2], T2};
		    fail when Found >= Min -> {ok, [R1], T1};
		    fail -> fail
		  end;
	      fail when Found >= Min -> {ok, [], T};
	      fail -> fail
	    end
    end.

'__seq'([P | Ps]) ->
    fun (T) ->
	    case P(T) of
	      {ok, R1, T1} ->
		  case ('__seq'(Ps))(T1) of
		    {ok, R2, T2} -> {ok, [R1 | R2], T2};
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end;
'__seq'([]) -> fun (T) -> {ok, [], T} end.
