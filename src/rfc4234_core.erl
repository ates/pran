%%% Do not modify this file, it is automatically generated by abnfc.
%%% All changes will be lost when it is regenerated.
%%% Generated by abnfc_gen on 2010-12-08 16:49:48

-module(rfc4234_core).

-export(['ALPHA'/0, 'BIT'/0, 'CHAR'/0, 'CR'/0, 'CRLF'/0,
	 'CTL'/0, 'DIGIT'/0, 'DQUOTE'/0, 'HEXDIG'/0, 'HTAB'/0,
	 'LF'/0, 'LWSP'/0, 'OCTET'/0, 'SP'/0, 'VCHAR'/0, 'WSP'/0,
	 decode/2]).

-include("rfc4234_core.hrl").

decode('ALPHA', Str) -> ('ALPHA'())(Str);
decode('BIT', Str) -> ('BIT'())(Str);
decode('CHAR', Str) -> ('CHAR'())(Str);
decode('CR', Str) -> ('CR'())(Str);
decode('CRLF', Str) -> ('CRLF'())(Str);
decode('CTL', Str) -> ('CTL'())(Str);
decode('DIGIT', Str) -> ('DIGIT'())(Str);
decode('DQUOTE', Str) -> ('DQUOTE'())(Str);
decode('HEXDIG', Str) -> ('HEXDIG'())(Str);
decode('HTAB', Str) -> ('HTAB'())(Str);
decode('LF', Str) -> ('LF'())(Str);
decode('LWSP', Str) -> ('LWSP'())(Str);
decode('OCTET', Str) -> ('OCTET'())(Str);
decode('SP', Str) -> ('SP'())(Str);
decode('VCHAR', Str) -> ('VCHAR'())(Str);
decode('WSP', Str) -> ('WSP'())(Str).

'ALPHA'() ->
    fun (T) ->
	    __P = fun (<<C, Tl/binary>>)
			  when (C >= 65) and (C =< 90) ->
			  {ok, C, Tl};
		      (<<C, Tl/binary>>) when (C >= 97) and (C =< 122) ->
			  {ok, C, Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

'BIT'() ->
    fun (T) ->
	    __P = fun (<<C, Tl/binary>>)
			  when (C >= 48) and (C =< 49) ->
			  {ok, C, Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

'CHAR'() ->
    fun (T) ->
	    __P = fun (<<C, Tl/binary>>)
			  when (C >= 1) and (C =< 127) ->
			  {ok, C, Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

'CR'() ->
    fun (T) ->
	    __P = fun (<<13, Tl/binary>>) -> {ok, 13, Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

'CRLF'() ->
    fun (T) ->
	    __P = '__alt'(['LF'(), '__seq'(['CR'(), 'LF'()])]),
	    __P(T)
    end.

'CTL'() ->
    fun (T) ->
	    __P = fun (<<C, Tl/binary>>) when C == 127 ->
			  {ok, C, Tl};
		      (<<C, Tl/binary>>) when (C >= 0) and (C =< 31) ->
			  {ok, C, Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

'DIGIT'() ->
    fun (T) ->
	    __P = fun (<<C, Tl/binary>>)
			  when (C >= 48) and (C =< 57) ->
			  {ok, C, Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

'DQUOTE'() ->
    fun (T) ->
	    __P = fun (<<34, Tl/binary>>) -> {ok, 34, Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

'HEXDIG'() ->
    fun (T) ->
	    __P = '__alt'(['DIGIT'(),
			   fun (<<C, Tl/binary>>) when C == 97 -> {ok, C, Tl};
			       (<<C, Tl/binary>>) when C == 65 -> {ok, C, Tl};
			       (_) -> fail
			   end,
			   fun (<<C, Tl/binary>>) when C == 98 -> {ok, C, Tl};
			       (<<C, Tl/binary>>) when C == 66 -> {ok, C, Tl};
			       (_) -> fail
			   end,
			   fun (<<C, Tl/binary>>) when C == 99 -> {ok, C, Tl};
			       (<<C, Tl/binary>>) when C == 67 -> {ok, C, Tl};
			       (_) -> fail
			   end,
			   fun (<<C, Tl/binary>>) when C == 100 -> {ok, C, Tl};
			       (<<C, Tl/binary>>) when C == 68 -> {ok, C, Tl};
			       (_) -> fail
			   end,
			   fun (<<C, Tl/binary>>) when C == 101 -> {ok, C, Tl};
			       (<<C, Tl/binary>>) when C == 69 -> {ok, C, Tl};
			       (_) -> fail
			   end,
			   fun (<<C, Tl/binary>>) when C == 102 -> {ok, C, Tl};
			       (<<C, Tl/binary>>) when C == 70 -> {ok, C, Tl};
			       (_) -> fail
			   end]),
	    __P(T)
    end.

'HTAB'() ->
    fun (T) ->
	    __P = fun (<<9, Tl/binary>>) -> {ok, 9, Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

'LF'() ->
    fun (T) ->
	    __P = fun (<<10, Tl/binary>>) -> {ok, 10, Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

'LWSP'() ->
    fun (T) ->
	    __P = '__repeat'(0, infinity,
			     '__alt'(['WSP'(), '__seq'(['CRLF'(), 'WSP'()])])),
	    __P(T)
    end.

'OCTET'() ->
    fun (T) ->
	    __P = fun (<<C, Tl/binary>>)
			  when (C >= 0) and (C =< 255) ->
			  {ok, C, Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

'SP'() ->
    fun (T) ->
	    __P = fun (<<32, Tl/binary>>) -> {ok, 32, Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

'VCHAR'() ->
    fun (T) ->
	    __P = fun (<<C, Tl/binary>>)
			  when (C >= 33) and (C =< 126) ->
			  {ok, C, Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

'WSP'() ->
    fun (T) -> __P = '__alt'(['SP'(), 'HTAB'()]), __P(T)
    end.

'__alt'([P | Ps]) ->
    fun (T) ->
	    case P(T) of
	      {ok, _R, _T1} = Res -> Res;
	      fail ->
		  case Ps of
		    [] -> fail;
		    _ -> ('__alt'(Ps))(T)
		  end
	    end
    end.

'__repeat'(Min, Max, P) -> '__repeat'(Min, Max, P, 0).

'__repeat'(Min, Max, P, Found) ->
    fun (T) ->
	    case P(T) of
	      {ok, R1, T1} when Max == Found + 1 -> {ok, [R1], T1};
	      {ok, R1, T1} ->
		  case ('__repeat'(Min, Max, P, Found + 1))(T1) of
		    {ok, R2, T2} -> {ok, [R1 | R2], T2};
		    fail when Found >= Min -> {ok, [R1], T1};
		    fail -> fail
		  end;
	      fail when Found >= Min -> {ok, [], T};
	      fail -> fail
	    end
    end.

'__seq'([P | Ps]) ->
    fun (T) ->
	    case P(T) of
	      {ok, R1, T1} ->
		  case ('__seq'(Ps))(T1) of
		    {ok, R2, T2} -> {ok, [R1 | R2], T2};
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end;
'__seq'([]) -> fun (T) -> {ok, [], T} end.
