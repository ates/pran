%%% Do not modify this file, it is automatically generated by abnfc.
%%% All changes will be lost when it is regenerated.
%%% Generated by abnfc_gen on 2010-12-08 18:23:41

-module(rfc3261).

-export(['ACKm'/0, 'Accept'/0, 'Accept-Encoding'/0,
	 'Accept-Language'/0, 'Alert-Info'/0, 'Allow'/0,
	 'Authentication-Info'/0, 'Authorization'/0, 'BYEm'/0,
	 'CANCELm'/0, 'COLON'/0, 'COMMA'/0, 'CSeq'/0,
	 'Call-ID'/0, 'Call-Info'/0, 'Client-Error'/0,
	 'Contact'/0, 'Content-Disposition'/0,
	 'Content-Encoding'/0, 'Content-Language'/0,
	 'Content-Length'/0, 'Content-Type'/0, 'Date'/0,
	 'EQUAL'/0, 'Error-Info'/0, 'Expires'/0, 'From'/0,
	 'Global-Failure'/0, 'HCOLON'/0, 'INVITEm'/0,
	 'IPv4address'/0, 'IPv6address'/0, 'IPv6reference'/0,
	 'In-Reply-To'/0, 'Informational'/0, 'LAQUOT'/0,
	 'LDQUOT'/0, 'LHEX'/0, 'LPAREN'/0, 'LWS'/0,
	 'MIME-Version'/0, 'Max-Forwards'/0, 'Method'/0,
	 'Min-Expires'/0, 'OPTIONSm'/0, 'Organization'/0,
	 'Priority'/0, 'Proxy-Authenticate'/0,
	 'Proxy-Authorization'/0, 'Proxy-Require'/0, 'RAQUOT'/0,
	 'RDQUOT'/0, 'REGISTERm'/0, 'RPAREN'/0,
	 'Reason-Phrase'/0, 'Record-Route'/0, 'Redirection'/0,
	 'Reply-To'/0, 'Request'/0, 'Request-Line'/0,
	 'Request-URI'/0, 'Require'/0, 'Response'/0,
	 'Retry-After'/0, 'Route'/0, 'SEMI'/0, 'SIP-URI'/0,
	 'SIP-Version'/0, 'SIP-date'/0, 'SIP-message'/0,
	 'SIPS-URI'/0, 'SLASH'/0, 'STAR'/0, 'SWS'/0, 'Server'/0,
	 'Server-Error'/0, 'Status-Code'/0, 'Status-Line'/0,
	 'Subject'/0, 'Success'/0, 'Supported'/0,
	 'TEXT-UTF8-TRIM'/0, 'TEXT-UTF8char'/0, 'Timestamp'/0,
	 'To'/0, 'URI'/0, 'UTF8-CONT'/0, 'UTF8-NONASCII'/0,
	 'Unsupported'/0, 'User-Agent'/0, 'Via'/0,
	 'WWW-Authenticate'/0, 'Warning'/0, 'abs-path'/0,
	 absoluteURI/0, 'accept-param'/0, 'accept-range'/0,
	 'addr-spec'/0, ainfo/0, 'alert-param'/0, algorithm/0,
	 alphanum/0, 'auth-param'/0, 'auth-param-name'/0,
	 'auth-scheme'/0, authority/0, 'c-p-expires'/0,
	 'c-p-q'/0, callid/0, challenge/0, cnonce/0,
	 'cnonce-value'/0, codings/0, comment/0,
	 'composite-type'/0, 'contact-extension'/0,
	 'contact-param'/0, 'contact-params'/0,
	 'content-coding'/0, credentials/0, ctext/0, date1/0,
	 decode/2, delay/0, 'delta-seconds'/0, 'dig-resp'/0,
	 'digest-cln'/0, 'digest-response'/0, 'digest-uri'/0,
	 'digest-uri-value'/0, 'discrete-type'/0,
	 'disp-extension-token'/0, 'disp-param'/0, 'disp-type'/0,
	 'display-name'/0, domain/0, domainlabel/0, dresponse/0,
	 encoding/0, 'error-uri'/0, escaped/0,
	 'extension-code'/0, 'extension-header'/0,
	 'extension-method'/0, 'extension-token'/0,
	 'from-param'/0, 'from-spec'/0, 'gen-value'/0,
	 'generic-param'/0, 'handling-param'/0, header/0,
	 'header-name'/0, 'header-value'/0, headers/0, hex4/0,
	 hexpart/0, hexseq/0, 'hier-part'/0, hname/0,
	 'hnv-unreserved'/0, host/0, hostname/0, hostport/0,
	 hvalue/0, 'iana-token'/0, 'ietf-token'/0, info/0,
	 'info-param'/0, language/0, 'language-range'/0,
	 'language-tag'/0, 'lr-param'/0, 'm-attribute'/0,
	 'm-parameter'/0, 'm-subtype'/0, 'm-type'/0, 'm-value'/0,
	 'maddr-param'/0, mark/0, 'media-range'/0,
	 'media-type'/0, 'message-body'/0, 'message-header'/0,
	 'message-qop'/0, 'method-param'/0, month/0,
	 'name-addr'/0, 'nc-value'/0, 'net-path'/0, nextnonce/0,
	 nonce/0, 'nonce-count'/0, 'nonce-value'/0, opaque/0,
	 'opaque-part'/0, 'option-tag'/0, 'other-challenge'/0,
	 'other-handling'/0, 'other-param'/0, 'other-priority'/0,
	 'other-response'/0, 'other-transport'/0, 'other-user'/0,
	 param/0, 'param-unreserved'/0, paramchar/0, password/0,
	 'path-segments'/0, pchar/0, pname/0, port/0,
	 'primary-tag'/0, 'priority-value'/0, product/0,
	 'product-version'/0, 'protocol-name'/0,
	 'protocol-version'/0, pseudonym/0, pvalue/0, qdtext/0,
	 'qop-options'/0, 'qop-value'/0, 'query'/0,
	 'quoted-pair'/0, 'quoted-string'/0, qvalue/0, realm/0,
	 'realm-value'/0, 'rec-route'/0, 'reg-name'/0,
	 'request-digest'/0, reserved/0, 'response-auth'/0,
	 'response-digest'/0, 'retry-param'/0, 'rfc1123-date'/0,
	 'route-param'/0, 'rplyto-param'/0, 'rplyto-spec'/0,
	 'rr-param'/0, scheme/0, segment/0, 'sent-by'/0,
	 'sent-protocol'/0, separators/0, 'server-val'/0, srvr/0,
	 stale/0, subtag/0, 'tag-param'/0, timex/0, 'to-param'/0,
	 token/0, toplabel/0, transport/0, 'transport-param'/0,
	 ttl/0, 'ttl-param'/0, unreserved/0, 'uri-parameter'/0,
	 'uri-parameters'/0, uric/0, 'uric-no-slash'/0, user/0,
	 'user-param'/0, 'user-unreserved'/0, userinfo/0,
	 username/0, 'username-value'/0, 'via-branch'/0,
	 'via-extension'/0, 'via-maddr'/0, 'via-params'/0,
	 'via-parm'/0, 'via-received'/0, 'via-ttl'/0,
	 'warn-agent'/0, 'warn-code'/0, 'warn-text'/0,
	 'warning-value'/0, wkday/0, word/0, 'x-token'/0]).

-include("rfc3261.hrl").

decode(alphanum, Str) -> (alphanum())(Str);
decode(reserved, Str) -> (reserved())(Str);
decode(unreserved, Str) -> (unreserved())(Str);
decode(mark, Str) -> (mark())(Str);
decode(escaped, Str) -> (escaped())(Str);
decode('LWS', Str) -> ('LWS'())(Str);
decode('SWS', Str) -> ('SWS'())(Str);
decode('HCOLON', Str) -> ('HCOLON'())(Str);
decode('TEXT-UTF8-TRIM', Str) ->
    ('TEXT-UTF8-TRIM'())(Str);
decode('TEXT-UTF8char', Str) ->
    ('TEXT-UTF8char'())(Str);
decode('UTF8-NONASCII', Str) ->
    ('UTF8-NONASCII'())(Str);
decode('UTF8-CONT', Str) -> ('UTF8-CONT'())(Str);
decode('LHEX', Str) -> ('LHEX'())(Str);
decode(token, Str) -> (token())(Str);
decode(separators, Str) -> (separators())(Str);
decode(word, Str) -> (word())(Str);
decode('STAR', Str) -> ('STAR'())(Str);
decode('SLASH', Str) -> ('SLASH'())(Str);
decode('EQUAL', Str) -> ('EQUAL'())(Str);
decode('LPAREN', Str) -> ('LPAREN'())(Str);
decode('RPAREN', Str) -> ('RPAREN'())(Str);
decode('RAQUOT', Str) -> ('RAQUOT'())(Str);
decode('LAQUOT', Str) -> ('LAQUOT'())(Str);
decode('COMMA', Str) -> ('COMMA'())(Str);
decode('SEMI', Str) -> ('SEMI'())(Str);
decode('COLON', Str) -> ('COLON'())(Str);
decode('LDQUOT', Str) -> ('LDQUOT'())(Str);
decode('RDQUOT', Str) -> ('RDQUOT'())(Str);
decode(comment, Str) -> (comment())(Str);
decode(ctext, Str) -> (ctext())(Str);
decode('quoted-string', Str) ->
    ('quoted-string'())(Str);
decode(qdtext, Str) -> (qdtext())(Str);
decode('quoted-pair', Str) -> ('quoted-pair'())(Str);
decode('SIP-URI', Str) -> ('SIP-URI'())(Str);
decode('SIPS-URI', Str) -> ('SIPS-URI'())(Str);
decode(userinfo, Str) -> (userinfo())(Str);
decode(user, Str) -> (user())(Str);
decode('user-unreserved', Str) ->
    ('user-unreserved'())(Str);
decode(password, Str) -> (password())(Str);
decode(hostport, Str) -> (hostport())(Str);
decode(host, Str) -> (host())(Str);
decode(hostname, Str) -> (hostname())(Str);
decode(domainlabel, Str) -> (domainlabel())(Str);
decode(toplabel, Str) -> (toplabel())(Str);
decode('IPv4address', Str) -> ('IPv4address'())(Str);
decode('IPv6reference', Str) ->
    ('IPv6reference'())(Str);
decode('IPv6address', Str) -> ('IPv6address'())(Str);
decode(hexpart, Str) -> (hexpart())(Str);
decode(hexseq, Str) -> (hexseq())(Str);
decode(hex4, Str) -> (hex4())(Str);
decode(port, Str) -> (port())(Str);
decode('uri-parameters', Str) ->
    ('uri-parameters'())(Str);
decode('uri-parameter', Str) ->
    ('uri-parameter'())(Str);
decode('transport-param', Str) ->
    ('transport-param'())(Str);
decode('other-transport', Str) ->
    ('other-transport'())(Str);
decode('user-param', Str) -> ('user-param'())(Str);
decode('other-user', Str) -> ('other-user'())(Str);
decode('method-param', Str) -> ('method-param'())(Str);
decode('ttl-param', Str) -> ('ttl-param'())(Str);
decode('maddr-param', Str) -> ('maddr-param'())(Str);
decode('lr-param', Str) -> ('lr-param'())(Str);
decode('other-param', Str) -> ('other-param'())(Str);
decode(pname, Str) -> (pname())(Str);
decode(pvalue, Str) -> (pvalue())(Str);
decode(paramchar, Str) -> (paramchar())(Str);
decode('param-unreserved', Str) ->
    ('param-unreserved'())(Str);
decode(headers, Str) -> (headers())(Str);
decode(header, Str) -> (header())(Str);
decode(hname, Str) -> (hname())(Str);
decode(hvalue, Str) -> (hvalue())(Str);
decode('hnv-unreserved', Str) ->
    ('hnv-unreserved'())(Str);
decode('SIP-message', Str) -> ('SIP-message'())(Str);
decode('Request', Str) -> ('Request'())(Str);
decode('Request-Line', Str) -> ('Request-Line'())(Str);
decode('Request-URI', Str) -> ('Request-URI'())(Str);
decode(absoluteURI, Str) -> (absoluteURI())(Str);
decode('hier-part', Str) -> ('hier-part'())(Str);
decode('net-path', Str) -> ('net-path'())(Str);
decode('abs-path', Str) -> ('abs-path'())(Str);
decode('opaque-part', Str) -> ('opaque-part'())(Str);
decode(uric, Str) -> (uric())(Str);
decode('uric-no-slash', Str) ->
    ('uric-no-slash'())(Str);
decode('path-segments', Str) ->
    ('path-segments'())(Str);
decode(segment, Str) -> (segment())(Str);
decode(param, Str) -> (param())(Str);
decode(pchar, Str) -> (pchar())(Str);
decode(scheme, Str) -> (scheme())(Str);
decode(authority, Str) -> (authority())(Str);
decode(srvr, Str) -> (srvr())(Str);
decode('reg-name', Str) -> ('reg-name'())(Str);
decode('query', Str) -> ('query'())(Str);
decode('SIP-Version', Str) -> ('SIP-Version'())(Str);
decode('message-header', Str) ->
    ('message-header'())(Str);
decode('INVITEm', Str) -> ('INVITEm'())(Str);
decode('ACKm', Str) -> ('ACKm'())(Str);
decode('OPTIONSm', Str) -> ('OPTIONSm'())(Str);
decode('BYEm', Str) -> ('BYEm'())(Str);
decode('CANCELm', Str) -> ('CANCELm'())(Str);
decode('REGISTERm', Str) -> ('REGISTERm'())(Str);
decode('Method', Str) -> ('Method'())(Str);
decode('extension-method', Str) ->
    ('extension-method'())(Str);
decode('Response', Str) -> ('Response'())(Str);
decode('Status-Line', Str) -> ('Status-Line'())(Str);
decode('Status-Code', Str) -> ('Status-Code'())(Str);
decode('extension-code', Str) ->
    ('extension-code'())(Str);
decode('Reason-Phrase', Str) ->
    ('Reason-Phrase'())(Str);
decode('Informational', Str) ->
    ('Informational'())(Str);
decode('Success', Str) -> ('Success'())(Str);
decode('Redirection', Str) -> ('Redirection'())(Str);
decode('Client-Error', Str) -> ('Client-Error'())(Str);
decode('Server-Error', Str) -> ('Server-Error'())(Str);
decode('Global-Failure', Str) ->
    ('Global-Failure'())(Str);
decode('Accept', Str) -> ('Accept'())(Str);
decode('accept-range', Str) -> ('accept-range'())(Str);
decode('media-range', Str) -> ('media-range'())(Str);
decode('accept-param', Str) -> ('accept-param'())(Str);
decode(qvalue, Str) -> (qvalue())(Str);
decode('generic-param', Str) ->
    ('generic-param'())(Str);
decode('gen-value', Str) -> ('gen-value'())(Str);
decode('Accept-Encoding', Str) ->
    ('Accept-Encoding'())(Str);
decode(encoding, Str) -> (encoding())(Str);
decode(codings, Str) -> (codings())(Str);
decode('content-coding', Str) ->
    ('content-coding'())(Str);
decode('Accept-Language', Str) ->
    ('Accept-Language'())(Str);
decode(language, Str) -> (language())(Str);
decode('language-range', Str) ->
    ('language-range'())(Str);
decode('Alert-Info', Str) -> ('Alert-Info'())(Str);
decode('alert-param', Str) -> ('alert-param'())(Str);
decode('Allow', Str) -> ('Allow'())(Str);
decode('Authorization', Str) ->
    ('Authorization'())(Str);
decode(credentials, Str) -> (credentials())(Str);
decode('digest-response', Str) ->
    ('digest-response'())(Str);
decode('dig-resp', Str) -> ('dig-resp'())(Str);
decode(username, Str) -> (username())(Str);
decode('username-value', Str) ->
    ('username-value'())(Str);
decode('digest-uri', Str) -> ('digest-uri'())(Str);
decode('digest-uri-value', Str) ->
    ('digest-uri-value'())(Str);
decode('message-qop', Str) -> ('message-qop'())(Str);
decode(cnonce, Str) -> (cnonce())(Str);
decode('cnonce-value', Str) -> ('cnonce-value'())(Str);
decode('nonce-count', Str) -> ('nonce-count'())(Str);
decode('nc-value', Str) -> ('nc-value'())(Str);
decode(dresponse, Str) -> (dresponse())(Str);
decode('request-digest', Str) ->
    ('request-digest'())(Str);
decode('auth-param', Str) -> ('auth-param'())(Str);
decode('auth-param-name', Str) ->
    ('auth-param-name'())(Str);
decode('other-response', Str) ->
    ('other-response'())(Str);
decode('auth-scheme', Str) -> ('auth-scheme'())(Str);
decode('Authentication-Info', Str) ->
    ('Authentication-Info'())(Str);
decode(ainfo, Str) -> (ainfo())(Str);
decode(nextnonce, Str) -> (nextnonce())(Str);
decode('response-auth', Str) ->
    ('response-auth'())(Str);
decode('response-digest', Str) ->
    ('response-digest'())(Str);
decode('Call-ID', Str) -> ('Call-ID'())(Str);
decode(callid, Str) -> (callid())(Str);
decode('Call-Info', Str) -> ('Call-Info'())(Str);
decode(info, Str) -> (info())(Str);
decode('info-param', Str) -> ('info-param'())(Str);
decode('Contact', Str) -> ('Contact'())(Str);
decode('contact-param', Str) ->
    ('contact-param'())(Str);
decode('name-addr', Str) -> ('name-addr'())(Str);
decode('addr-spec', Str) -> ('addr-spec'())(Str);
decode('display-name', Str) -> ('display-name'())(Str);
decode('contact-params', Str) ->
    ('contact-params'())(Str);
decode('c-p-q', Str) -> ('c-p-q'())(Str);
decode('c-p-expires', Str) -> ('c-p-expires'())(Str);
decode('contact-extension', Str) ->
    ('contact-extension'())(Str);
decode('delta-seconds', Str) ->
    ('delta-seconds'())(Str);
decode('Content-Disposition', Str) ->
    ('Content-Disposition'())(Str);
decode('disp-type', Str) -> ('disp-type'())(Str);
decode('disp-param', Str) -> ('disp-param'())(Str);
decode('handling-param', Str) ->
    ('handling-param'())(Str);
decode('other-handling', Str) ->
    ('other-handling'())(Str);
decode('disp-extension-token', Str) ->
    ('disp-extension-token'())(Str);
decode('Content-Encoding', Str) ->
    ('Content-Encoding'())(Str);
decode('Content-Language', Str) ->
    ('Content-Language'())(Str);
decode('language-tag', Str) -> ('language-tag'())(Str);
decode('primary-tag', Str) -> ('primary-tag'())(Str);
decode(subtag, Str) -> (subtag())(Str);
decode('Content-Length', Str) ->
    ('Content-Length'())(Str);
decode('Content-Type', Str) -> ('Content-Type'())(Str);
decode('media-type', Str) -> ('media-type'())(Str);
decode('m-type', Str) -> ('m-type'())(Str);
decode('discrete-type', Str) ->
    ('discrete-type'())(Str);
decode('composite-type', Str) ->
    ('composite-type'())(Str);
decode('extension-token', Str) ->
    ('extension-token'())(Str);
decode('ietf-token', Str) -> ('ietf-token'())(Str);
decode('x-token', Str) -> ('x-token'())(Str);
decode('m-subtype', Str) -> ('m-subtype'())(Str);
decode('iana-token', Str) -> ('iana-token'())(Str);
decode('m-parameter', Str) -> ('m-parameter'())(Str);
decode('m-attribute', Str) -> ('m-attribute'())(Str);
decode('m-value', Str) -> ('m-value'())(Str);
decode('CSeq', Str) -> ('CSeq'())(Str);
decode('Date', Str) -> ('Date'())(Str);
decode('SIP-date', Str) -> ('SIP-date'())(Str);
decode('rfc1123-date', Str) -> ('rfc1123-date'())(Str);
decode(date1, Str) -> (date1())(Str);
decode(timex, Str) -> (timex())(Str);
decode(wkday, Str) -> (wkday())(Str);
decode(month, Str) -> (month())(Str);
decode('Error-Info', Str) -> ('Error-Info'())(Str);
decode('error-uri', Str) -> ('error-uri'())(Str);
decode('Expires', Str) -> ('Expires'())(Str);
decode('From', Str) -> ('From'())(Str);
decode('from-spec', Str) -> ('from-spec'())(Str);
decode('from-param', Str) -> ('from-param'())(Str);
decode('tag-param', Str) -> ('tag-param'())(Str);
decode('In-Reply-To', Str) -> ('In-Reply-To'())(Str);
decode('Max-Forwards', Str) -> ('Max-Forwards'())(Str);
decode('MIME-Version', Str) -> ('MIME-Version'())(Str);
decode('Min-Expires', Str) -> ('Min-Expires'())(Str);
decode('Organization', Str) -> ('Organization'())(Str);
decode('Priority', Str) -> ('Priority'())(Str);
decode('priority-value', Str) ->
    ('priority-value'())(Str);
decode('other-priority', Str) ->
    ('other-priority'())(Str);
decode('Proxy-Authenticate', Str) ->
    ('Proxy-Authenticate'())(Str);
decode(challenge, Str) -> (challenge())(Str);
decode('other-challenge', Str) ->
    ('other-challenge'())(Str);
decode('digest-cln', Str) -> ('digest-cln'())(Str);
decode(realm, Str) -> (realm())(Str);
decode('realm-value', Str) -> ('realm-value'())(Str);
decode(domain, Str) -> (domain())(Str);
decode('URI', Str) -> ('URI'())(Str);
decode(nonce, Str) -> (nonce())(Str);
decode('nonce-value', Str) -> ('nonce-value'())(Str);
decode(opaque, Str) -> (opaque())(Str);
decode(stale, Str) -> (stale())(Str);
decode(algorithm, Str) -> (algorithm())(Str);
decode('qop-options', Str) -> ('qop-options'())(Str);
decode('qop-value', Str) -> ('qop-value'())(Str);
decode('Proxy-Authorization', Str) ->
    ('Proxy-Authorization'())(Str);
decode('Proxy-Require', Str) ->
    ('Proxy-Require'())(Str);
decode('option-tag', Str) -> ('option-tag'())(Str);
decode('Record-Route', Str) -> ('Record-Route'())(Str);
decode('rec-route', Str) -> ('rec-route'())(Str);
decode('rr-param', Str) -> ('rr-param'())(Str);
decode('Reply-To', Str) -> ('Reply-To'())(Str);
decode('rplyto-spec', Str) -> ('rplyto-spec'())(Str);
decode('rplyto-param', Str) -> ('rplyto-param'())(Str);
decode('Require', Str) -> ('Require'())(Str);
decode('Retry-After', Str) -> ('Retry-After'())(Str);
decode('retry-param', Str) -> ('retry-param'())(Str);
decode('Route', Str) -> ('Route'())(Str);
decode('route-param', Str) -> ('route-param'())(Str);
decode('Server', Str) -> ('Server'())(Str);
decode('server-val', Str) -> ('server-val'())(Str);
decode(product, Str) -> (product())(Str);
decode('product-version', Str) ->
    ('product-version'())(Str);
decode('Subject', Str) -> ('Subject'())(Str);
decode('Supported', Str) -> ('Supported'())(Str);
decode('Timestamp', Str) -> ('Timestamp'())(Str);
decode(delay, Str) -> (delay())(Str);
decode('To', Str) -> ('To'())(Str);
decode('to-param', Str) -> ('to-param'())(Str);
decode('Unsupported', Str) -> ('Unsupported'())(Str);
decode('User-Agent', Str) -> ('User-Agent'())(Str);
decode('Via', Str) -> ('Via'())(Str);
decode('via-parm', Str) -> ('via-parm'())(Str);
decode('via-params', Str) -> ('via-params'())(Str);
decode('via-ttl', Str) -> ('via-ttl'())(Str);
decode('via-maddr', Str) -> ('via-maddr'())(Str);
decode('via-received', Str) -> ('via-received'())(Str);
decode('via-branch', Str) -> ('via-branch'())(Str);
decode('via-extension', Str) ->
    ('via-extension'())(Str);
decode('sent-protocol', Str) ->
    ('sent-protocol'())(Str);
decode('protocol-name', Str) ->
    ('protocol-name'())(Str);
decode('protocol-version', Str) ->
    ('protocol-version'())(Str);
decode(transport, Str) -> (transport())(Str);
decode('sent-by', Str) -> ('sent-by'())(Str);
decode(ttl, Str) -> (ttl())(Str);
decode('Warning', Str) -> ('Warning'())(Str);
decode('warning-value', Str) ->
    ('warning-value'())(Str);
decode('warn-code', Str) -> ('warn-code'())(Str);
decode('warn-agent', Str) -> ('warn-agent'())(Str);
decode('warn-text', Str) -> ('warn-text'())(Str);
decode(pseudonym, Str) -> (pseudonym())(Str);
decode('WWW-Authenticate', Str) ->
    ('WWW-Authenticate'())(Str);
decode('extension-header', Str) ->
    ('extension-header'())(Str);
decode('header-name', Str) -> ('header-name'())(Str);
decode('header-value', Str) -> ('header-value'())(Str);
decode('message-body', Str) -> ('message-body'())(Str).

alphanum() ->
    fun (T) -> __P = '__alt'(['ALPHA'(), 'DIGIT'()]), __P(T)
    end.

reserved() ->
    fun (T) ->
	    __P = fun (<<C, Tl/binary>>) when C == 36 ->
			  {ok, C, Tl};
		      (<<C, Tl/binary>>) when C == 38 -> {ok, C, Tl};
		      (<<C, Tl/binary>>) when (C >= 43) and (C =< 44) ->
			  {ok, C, Tl};
		      (<<C, Tl/binary>>) when C == 47 -> {ok, C, Tl};
		      (<<C, Tl/binary>>) when (C >= 58) and (C =< 59) ->
			  {ok, C, Tl};
		      (<<C, Tl/binary>>) when C == 61 -> {ok, C, Tl};
		      (<<C, Tl/binary>>) when (C >= 63) and (C =< 64) ->
			  {ok, C, Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

unreserved() ->
    fun (T) -> __P = '__alt'([alphanum(), mark()]), __P(T)
    end.

mark() ->
    fun (T) ->
	    __P = fun (<<C, Tl/binary>>) when C == 33 ->
			  {ok, C, Tl};
		      (<<C, Tl/binary>>) when (C >= 39) and (C =< 42) ->
			  {ok, C, Tl};
		      (<<C, Tl/binary>>) when (C >= 45) and (C =< 46) ->
			  {ok, C, Tl};
		      (<<C, Tl/binary>>) when C == 95 -> {ok, C, Tl};
		      (<<C, Tl/binary>>) when C == 126 -> {ok, C, Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

escaped() ->
    fun (T) ->
	    __P = '__seq'([fun (<<37, Tl/binary>>) -> {ok, 37, Tl};
			       (_) -> fail
			   end,
			   'HEXDIG'(), 'HEXDIG'()]),
	    __P(T)
    end.

'LWS'() ->
    fun (T) ->
	    __P = '__seq'(['__repeat'(0, 1,
				      '__seq'(['__repeat'(0, infinity, 'WSP'()), 'CRLF'()])),
			   '__repeat'(1, infinity, 'WSP'())]),
	    case __P(T) of
	      {ok, [_YY1, _YY2] = _YY, _T1} ->
		  try 'LWS' of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'SWS'() ->
    fun (T) ->
	    __P = '__repeat'(0, 1, 'LWS'()),
	    case __P(T) of
	      {ok, _YY, _T1} ->
		  try 'SWS' of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'HCOLON'() ->
    fun (T) ->
	    __P = '__seq'(['__repeat'(0, infinity,
				      '__alt'(['SP'(), 'HTAB'()])),
			   fun (<<58, Tl/binary>>) -> {ok, 58, Tl};
			       (_) -> fail
			   end,
			   'SWS'()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try 'HCOLON' of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'TEXT-UTF8-TRIM'() ->
    fun (T) ->
	    __P = '__seq'(['__repeat'(1, infinity,
				      'TEXT-UTF8char'()),
			   '__repeat'(0, infinity,
				      '__seq'(['__repeat'(0, infinity, 'LWS'()),
					       'TEXT-UTF8char'()]))]),
	    __P(T)
    end.

'TEXT-UTF8char'() ->
    fun (T) ->
	    __P = '__alt'([fun (<<C, Tl/binary>>)
				   when (C >= 33) and (C =< 126) ->
				   {ok, C, Tl};
			       (_) -> fail
			   end,
			   'UTF8-NONASCII'()]),
	    __P(T)
    end.

'UTF8-NONASCII'() ->
    fun (T) ->
	    __P = '__alt'(['__seq'([fun (<<C, Tl/binary>>)
					    when (C >= 192) and (C =< 223) ->
					    {ok, C, Tl};
					(_) -> fail
				    end,
				    '__repeat'(1, 1, 'UTF8-CONT'())]),
			   '__seq'([fun (<<C, Tl/binary>>)
					    when (C >= 224) and (C =< 239) ->
					    {ok, C, Tl};
					(_) -> fail
				    end,
				    '__repeat'(2, 2, 'UTF8-CONT'())]),
			   '__seq'([fun (<<C, Tl/binary>>)
					    when (C >= 240) and (C =< 247) ->
					    {ok, C, Tl};
					(_) -> fail
				    end,
				    '__repeat'(3, 3, 'UTF8-CONT'())]),
			   '__seq'([fun (<<C, Tl/binary>>)
					    when (C >= 248) and (C =< 251) ->
					    {ok, C, Tl};
					(_) -> fail
				    end,
				    '__repeat'(4, 4, 'UTF8-CONT'())]),
			   '__seq'([fun (<<C, Tl/binary>>)
					    when (C >= 252) and (C =< 253) ->
					    {ok, C, Tl};
					(_) -> fail
				    end,
				    '__repeat'(5, 5, 'UTF8-CONT'())])]),
	    __P(T)
    end.

'UTF8-CONT'() ->
    fun (T) ->
	    __P = fun (<<C, Tl/binary>>)
			  when (C >= 128) and (C =< 191) ->
			  {ok, C, Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

'LHEX'() ->
    fun (T) ->
	    __P = '__alt'([fun (<<C, Tl/binary>>)
				   when (C >= 97) and (C =< 102) ->
				   {ok, C, Tl};
			       (_) -> fail
			   end,
			   'DIGIT'()]),
	    __P(T)
    end.

token() ->
    fun (T) ->
	    __P = '__repeat'(1, infinity,
			     '__alt'([fun (<<C, Tl/binary>>) when C == 33 ->
					      {ok, C, Tl};
					  (<<C, Tl/binary>>) when C == 37 -> {ok, C, Tl};
					  (<<C, Tl/binary>>) when C == 39 -> {ok, C, Tl};
					  (<<C, Tl/binary>>) when (C >= 42) and (C =< 43) ->
					      {ok, C, Tl};
					  (<<C, Tl/binary>>) when (C >= 45) and (C =< 46) ->
					      {ok, C, Tl};
					  (<<C, Tl/binary>>) when (C >= 95) and (C =< 96) ->
					      {ok, C, Tl};
					  (<<C, Tl/binary>>) when C == 126 -> {ok, C, Tl};
					  (_) -> fail
				      end,
				      alphanum()])),
	    __P(T)
    end.

separators() ->
    fun (T) ->
	    __P = '__alt'([fun (<<C, Tl/binary>>)
				   when (C >= 40) and (C =< 41) ->
				   {ok, C, Tl};
			       (<<C, Tl/binary>>) when C == 44 -> {ok, C, Tl};
			       (<<C, Tl/binary>>) when C == 47 -> {ok, C, Tl};
			       (<<C, Tl/binary>>) when (C >= 58) and (C =< 64) ->
				   {ok, C, Tl};
			       (<<C, Tl/binary>>) when (C >= 91) and (C =< 93) ->
				   {ok, C, Tl};
			       (<<C, Tl/binary>>) when C == 123 -> {ok, C, Tl};
			       (<<C, Tl/binary>>) when C == 125 -> {ok, C, Tl};
			       (_) -> fail
			   end,
			   'DQUOTE'(), 'SP'(), 'HTAB'()]),
	    __P(T)
    end.

word() ->
    fun (T) ->
	    __P = '__repeat'(1, infinity,
			     '__alt'([fun (<<C, Tl/binary>>) when C == 33 ->
					      {ok, C, Tl};
					  (<<C, Tl/binary>>) when C == 37 -> {ok, C, Tl};
					  (<<C, Tl/binary>>) when (C >= 39) and (C =< 43) ->
					      {ok, C, Tl};
					  (<<C, Tl/binary>>) when (C >= 45) and (C =< 47) ->
					      {ok, C, Tl};
					  (<<C, Tl/binary>>) when C == 58 -> {ok, C, Tl};
					  (<<C, Tl/binary>>) when C == 60 -> {ok, C, Tl};
					  (<<C, Tl/binary>>) when (C >= 62) and (C =< 63) ->
					      {ok, C, Tl};
					  (<<C, Tl/binary>>) when (C >= 91) and (C =< 93) ->
					      {ok, C, Tl};
					  (<<C, Tl/binary>>) when (C >= 95) and (C =< 96) ->
					      {ok, C, Tl};
					  (<<C, Tl/binary>>) when C == 123 -> {ok, C, Tl};
					  (<<C, Tl/binary>>) when (C >= 125) and (C =< 126) ->
					      {ok, C, Tl};
					  (_) -> fail
				      end,
				      alphanum(), 'DQUOTE'()])),
	    __P(T)
    end.

'STAR'() ->
    fun (T) ->
	    __P = '__seq'(['SWS'(),
			   fun (<<42, Tl/binary>>) -> {ok, 42, Tl};
			       (_) -> fail
			   end,
			   'SWS'()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try 'STAR' of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'SLASH'() ->
    fun (T) ->
	    __P = '__seq'(['SWS'(),
			   fun (<<47, Tl/binary>>) -> {ok, 47, Tl};
			       (_) -> fail
			   end,
			   'SWS'()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try 'SLASH' of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'EQUAL'() ->
    fun (T) ->
	    __P = '__seq'(['SWS'(),
			   fun (<<61, Tl/binary>>) -> {ok, 61, Tl};
			       (_) -> fail
			   end,
			   'SWS'()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try 'EQUAL' of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'LPAREN'() ->
    fun (T) ->
	    __P = '__seq'(['SWS'(),
			   fun (<<40, Tl/binary>>) -> {ok, 40, Tl};
			       (_) -> fail
			   end,
			   'SWS'()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try 'LPAREN' of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'RPAREN'() ->
    fun (T) ->
	    __P = '__seq'(['SWS'(),
			   fun (<<41, Tl/binary>>) -> {ok, 41, Tl};
			       (_) -> fail
			   end,
			   'SWS'()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try 'RPAREN' of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'RAQUOT'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<62, Tl/binary>>) -> {ok, 62, Tl};
			       (_) -> fail
			   end,
			   'SWS'()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2] = _YY, _T1} ->
		  try 'RAQUOT' of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'LAQUOT'() ->
    fun (T) ->
	    __P = '__seq'(['SWS'(),
			   fun (<<60, Tl/binary>>) -> {ok, 60, Tl};
			       (_) -> fail
			   end]),
	    case __P(T) of
	      {ok, [_YY1, _YY2] = _YY, _T1} ->
		  try 'LAQUOT' of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'COMMA'() ->
    fun (T) ->
	    __P = '__seq'(['SWS'(),
			   fun (<<44, Tl/binary>>) -> {ok, 44, Tl};
			       (_) -> fail
			   end,
			   'SWS'()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try 'COMMA' of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'SEMI'() ->
    fun (T) ->
	    __P = '__seq'(['SWS'(),
			   fun (<<59, Tl/binary>>) -> {ok, 59, Tl};
			       (_) -> fail
			   end,
			   'SWS'()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try 'SEMI' of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'COLON'() ->
    fun (T) ->
	    __P = '__seq'(['SWS'(),
			   fun (<<58, Tl/binary>>) -> {ok, 58, Tl};
			       (_) -> fail
			   end,
			   'SWS'()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try 'COLON' of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'LDQUOT'() ->
    fun (T) ->
	    __P = '__seq'(['SWS'(), 'DQUOTE'()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2] = _YY, _T1} ->
		  try 'LDQUOT' of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'RDQUOT'() ->
    fun (T) ->
	    __P = '__seq'(['DQUOTE'(), 'SWS'()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2] = _YY, _T1} ->
		  try 'RDQUOT' of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

comment() ->
    fun (T) ->
	    __P = '__seq'(['LPAREN'(),
			   '__repeat'(0, infinity,
				      '__alt'([ctext(), 'quoted-pair'(), comment()])),
			   'RPAREN'()]),
	    __P(T)
    end.

ctext() ->
    fun (T) ->
	    __P = '__alt'([fun (<<C, Tl/binary>>)
				   when (C >= 33) and (C =< 39) ->
				   {ok, C, Tl};
			       (<<C, Tl/binary>>) when (C >= 42) and (C =< 91) ->
				   {ok, C, Tl};
			       (<<C, Tl/binary>>) when (C >= 93) and (C =< 126) ->
				   {ok, C, Tl};
			       (_) -> fail
			   end,
			   'UTF8-NONASCII'(), 'LWS'()]),
	    __P(T)
    end.

'quoted-string'() ->
    fun (T) ->
	    __P = '__seq'(['SWS'(), 'DQUOTE'(),
			   '__repeat'(0, infinity,
				      '__alt'([qdtext(), 'quoted-pair'()])),
			   'DQUOTE'()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3, _YY4] = _YY, _T1} ->
		  try _YY3 of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

qdtext() ->
    fun (T) ->
	    __P = '__alt'([fun (<<C, Tl/binary>>) when C == 33 ->
				   {ok, C, Tl};
			       (<<C, Tl/binary>>) when (C >= 35) and (C =< 91) ->
				   {ok, C, Tl};
			       (<<C, Tl/binary>>) when (C >= 93) and (C =< 126) ->
				   {ok, C, Tl};
			       (_) -> fail
			   end,
			   'LWS'(), 'UTF8-NONASCII'()]),
	    __P(T)
    end.

'quoted-pair'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<92, Tl/binary>>) -> {ok, 92, Tl};
			       (_) -> fail
			   end,
			   fun (<<C, Tl/binary>>) when (C >= 0) and (C =< 9) ->
				   {ok, C, Tl};
			       (<<C, Tl/binary>>) when (C >= 11) and (C =< 12) ->
				   {ok, C, Tl};
			       (<<C, Tl/binary>>) when (C >= 14) and (C =< 127) ->
				   {ok, C, Tl};
			       (_) -> fail
			   end]),
	    __P(T)
    end.

'SIP-URI'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, Tl/binary>>)
				   when (C1 == 115) or (C1 == 83),
					(C2 == 105) or (C2 == 73), (C3 == 112) or (C3 == 80),
					C4 == 58 ->
				   {ok, [C1, C2, C3, C4], Tl};
			       (_) -> fail
			   end,
			   '__repeat'(0, 1, userinfo()), hostport(),
			   'uri-parameters'(), '__repeat'(0, 1, headers())]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3, _YY4, _YY5] = _YY, _T1} ->
		  try {'SIP-URI', _YY2, _YY3, _YY4, _YY5} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'SIPS-URI'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, Tl/binary>>)
				   when (C1 == 115) or (C1 == 83),
					(C2 == 105) or (C2 == 73), (C3 == 112) or (C3 == 80),
					(C4 == 115) or (C4 == 83), C5 == 58 ->
				   {ok, [C1, C2, C3, C4, C5], Tl};
			       (_) -> fail
			   end,
			   '__repeat'(0, 1, userinfo()), hostport(),
			   'uri-parameters'(), '__repeat'(0, 1, headers())]),
	    __P(T)
    end.

userinfo() ->
    fun (T) ->
	    __P = '__seq'(['__alt'([user(),
				    'telephone-subscriber'()]),
			   '__repeat'(0, 1,
				      '__seq'([fun (<<58, Tl/binary>>) -> {ok, 58, Tl};
						   (_) -> fail
					       end,
					       password()])),
			   fun (<<64, Tl/binary>>) -> {ok, 64, Tl};
			       (_) -> fail
			   end]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try {userinfo, _YY1, _YY2} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

user() ->
    fun (T) ->
	    __P = '__repeat'(1, infinity,
			     '__alt'([unreserved(), escaped(),
				      'user-unreserved'()])),
	    case __P(T) of
	      {ok, _YY, _T1} ->
		  try {user, lists:flatten(_YY)} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'user-unreserved'() ->
    fun (T) ->
	    __P = fun (<<C, Tl/binary>>) when C == 36 ->
			  {ok, C, Tl};
		      (<<C, Tl/binary>>) when C == 38 -> {ok, C, Tl};
		      (<<C, Tl/binary>>) when (C >= 43) and (C =< 44) ->
			  {ok, C, Tl};
		      (<<C, Tl/binary>>) when C == 47 -> {ok, C, Tl};
		      (<<C, Tl/binary>>) when C == 59 -> {ok, C, Tl};
		      (<<C, Tl/binary>>) when C == 61 -> {ok, C, Tl};
		      (<<C, Tl/binary>>) when C == 63 -> {ok, C, Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

password() ->
    fun (T) ->
	    __P = '__repeat'(0, infinity,
			     '__alt'([fun (<<C, Tl/binary>>) when C == 36 ->
					      {ok, C, Tl};
					  (<<C, Tl/binary>>) when C == 38 -> {ok, C, Tl};
					  (<<C, Tl/binary>>) when (C >= 43) and (C =< 44) ->
					      {ok, C, Tl};
					  (<<C, Tl/binary>>) when C == 61 -> {ok, C, Tl};
					  (_) -> fail
				      end,
				      unreserved(), escaped()])),
	    __P(T)
    end.

hostport() ->
    fun (T) ->
	    __P = '__seq'([host(),
			   '__repeat'(0, 1,
				      '__seq'([fun (<<58, Tl/binary>>) -> {ok, 58, Tl};
						   (_) -> fail
					       end,
					       port()]))]),
	    case __P(T) of
	      {ok, [_YY1, _YY2] = _YY, _T1} ->
		  try {hostport, _YY1,
		       case _YY2 of
			 [] -> [];
			 [[_, Port]] -> list_to_integer(Port)
		       end}
		  of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

host() ->
    fun (T) ->
	    __P = '__alt'([hostname(), 'IPv4address'(),
			   'IPv6reference'()]),
	    __P(T)
    end.

hostname() ->
    fun (T) ->
	    __P = '__seq'(['__repeat'(0, infinity,
				      '__seq'([domainlabel(),
					       fun (<<46, Tl/binary>>) -> {ok, 46, Tl};
						   (_) -> fail
					       end])),
			   toplabel(),
			   '__repeat'(0, 1,
				      fun (<<46, Tl/binary>>) -> {ok, 46, Tl};
					  (_) -> fail
				      end)]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try lists:flatten(_YY) of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

domainlabel() ->
    fun (T) ->
	    __P = '__repeat'(0, infinity,
			     '__alt'([fun (<<C, Tl/binary>>) when C == 45 ->
					      {ok, C, Tl};
					  (_) -> fail
				      end,
				      alphanum()])),
	    __P(T)
    end.

toplabel() ->
    fun (T) ->
	    __P = '__repeat'(0, infinity,
			     '__alt'([fun (<<C, Tl/binary>>) when C == 45 ->
					      {ok, C, Tl};
					  (_) -> fail
				      end,
				      alphanum()])),
	    __P(T)
    end.

'IPv4address'() ->
    fun (T) ->
	    __P = '__seq'(['__repeat'(1, 3, 'DIGIT'()),
			   fun (<<46, Tl/binary>>) -> {ok, 46, Tl};
			       (_) -> fail
			   end,
			   '__repeat'(1, 3, 'DIGIT'()),
			   fun (<<46, Tl/binary>>) -> {ok, 46, Tl};
			       (_) -> fail
			   end,
			   '__repeat'(1, 3, 'DIGIT'()),
			   fun (<<46, Tl/binary>>) -> {ok, 46, Tl};
			       (_) -> fail
			   end,
			   '__repeat'(1, 3, 'DIGIT'())]),
	    __P(T)
    end.

'IPv6reference'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<91, Tl/binary>>) -> {ok, 91, Tl};
			       (_) -> fail
			   end,
			   'IPv6address'(),
			   fun (<<93, Tl/binary>>) -> {ok, 93, Tl};
			       (_) -> fail
			   end]),
	    __P(T)
    end.

'IPv6address'() ->
    fun (T) ->
	    __P = '__seq'([hexpart(),
			   '__repeat'(0, 1,
				      '__seq'([fun (<<58, Tl/binary>>) -> {ok, 58, Tl};
						   (_) -> fail
					       end,
					       'IPv4address'()]))]),
	    __P(T)
    end.

hexpart() ->
    fun (T) ->
	    __P = '__alt'([hexseq(),
			   '__seq'([hexseq(),
				    fun (<<C1, C2, Tl/binary>>) when C1 == 58, C2 == 58 ->
					    {ok, [C1, C2], Tl};
					(_) -> fail
				    end,
				    '__repeat'(0, 1, hexseq())]),
			   '__seq'([fun (<<C1, C2, Tl/binary>>)
					    when C1 == 58, C2 == 58 ->
					    {ok, [C1, C2], Tl};
					(_) -> fail
				    end,
				    '__repeat'(0, 1, hexseq())])]),
	    __P(T)
    end.

hexseq() ->
    fun (T) ->
	    __P = '__seq'([hex4(),
			   '__repeat'(0, infinity,
				      '__seq'([fun (<<58, Tl/binary>>) -> {ok, 58, Tl};
						   (_) -> fail
					       end,
					       hex4()]))]),
	    __P(T)
    end.

hex4() ->
    fun (T) -> __P = '__repeat'(1, 4, 'HEXDIG'()), __P(T)
    end.

port() ->
    fun (T) ->
	    __P = '__repeat'(1, infinity, 'DIGIT'()), __P(T)
    end.

'uri-parameters'() ->
    fun (T) ->
	    __P = '__repeat'(0, infinity,
			     '__seq'([fun (<<59, Tl/binary>>) -> {ok, 59, Tl};
					  (_) -> fail
				      end,
				      'uri-parameter'()])),
	    case __P(T) of
	      {ok, _YY, _T1} ->
		  try {'uri-parameters', [P || [$;, P] <- _YY]} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'uri-parameter'() ->
    fun (T) ->
	    __P = '__alt'(['transport-param'(), 'user-param'(),
			   'method-param'(), 'ttl-param'(), 'maddr-param'(),
			   'lr-param'(), 'other-param'()]),
	    __P(T)
    end.

'transport-param'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
				  C9, C10, Tl/binary>>)
				   when (C1 == 116) or (C1 == 84),
					(C2 == 114) or (C2 == 82), (C3 == 97) or (C3 == 65),
					(C4 == 110) or (C4 == 78), (C5 == 115) or (C5 == 83),
					(C6 == 112) or (C6 == 80), (C7 == 111) or (C7 == 79),
					(C8 == 114) or (C8 == 82), (C9 == 116) or (C9 == 84),
					C10 == 61 ->
				   {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10], Tl};
			       (_) -> fail
			   end,
			   '__alt'([fun (<<C1, C2, C3, Tl/binary>>)
					    when (C1 == 117) or (C1 == 85),
						 (C2 == 100) or (C2 == 68),
						 (C3 == 112) or (C3 == 80) ->
					    {ok, [C1, C2, C3], Tl};
					(_) -> fail
				    end,
				    fun (<<C1, C2, C3, Tl/binary>>)
					    when (C1 == 116) or (C1 == 84),
						 (C2 == 99) or (C2 == 67),
						 (C3 == 112) or (C3 == 80) ->
					    {ok, [C1, C2, C3], Tl};
					(_) -> fail
				    end,
				    fun (<<C1, C2, C3, C4, Tl/binary>>)
					    when (C1 == 115) or (C1 == 83),
						 (C2 == 99) or (C2 == 67),
						 (C3 == 116) or (C3 == 84),
						 (C4 == 112) or (C4 == 80) ->
					    {ok, [C1, C2, C3, C4], Tl};
					(_) -> fail
				    end,
				    fun (<<C1, C2, C3, Tl/binary>>)
					    when (C1 == 116) or (C1 == 84),
						 (C2 == 108) or (C2 == 76),
						 (C3 == 115) or (C3 == 83) ->
					    {ok, [C1, C2, C3], Tl};
					(_) -> fail
				    end,
				    'other-transport'()])]),
	    case __P(T) of
	      {ok, [_YY1, _YY2] = _YY, _T1} ->
		  try {transport, _YY2} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'other-transport'() ->
    fun (T) -> __P = token(), __P(T) end.

'user-param'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, Tl/binary>>)
				   when (C1 == 117) or (C1 == 85),
					(C2 == 115) or (C2 == 83), (C3 == 101) or (C3 == 69),
					(C4 == 114) or (C4 == 82), C5 == 61 ->
				   {ok, [C1, C2, C3, C4, C5], Tl};
			       (_) -> fail
			   end,
			   '__alt'([fun (<<C1, C2, C3, C4, C5, Tl/binary>>)
					    when (C1 == 112) or (C1 == 80),
						 (C2 == 104) or (C2 == 72),
						 (C3 == 111) or (C3 == 79),
						 (C4 == 110) or (C4 == 78),
						 (C5 == 101) or (C5 == 69) ->
					    {ok, [C1, C2, C3, C4, C5], Tl};
					(_) -> fail
				    end,
				    fun (<<C1, C2, Tl/binary>>)
					    when (C1 == 105) or (C1 == 73),
						 (C2 == 112) or (C2 == 80) ->
					    {ok, [C1, C2], Tl};
					(_) -> fail
				    end,
				    'other-user'()])]),
	    case __P(T) of
	      {ok, [_YY1, _YY2] = _YY, _T1} ->
		  try {'user-param', _YY2} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'other-user'() -> fun (T) -> __P = token(), __P(T) end.

'method-param'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7,
				  Tl/binary>>)
				   when (C1 == 109) or (C1 == 77),
					(C2 == 101) or (C2 == 69), (C3 == 116) or (C3 == 84),
					(C4 == 104) or (C4 == 72), (C5 == 111) or (C5 == 79),
					(C6 == 100) or (C6 == 68), C7 == 61 ->
				   {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
			       (_) -> fail
			   end,
			   'Method'()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2] = _YY, _T1} ->
		  try {'method-param', _YY2} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'ttl-param'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, Tl/binary>>)
				   when (C1 == 116) or (C1 == 84),
					(C2 == 116) or (C2 == 84), (C3 == 108) or (C3 == 76),
					C4 == 61 ->
				   {ok, [C1, C2, C3, C4], Tl};
			       (_) -> fail
			   end,
			   ttl()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2] = _YY, _T1} ->
		  try {'ttl-param', _YY2} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'maddr-param'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6,
				  Tl/binary>>)
				   when (C1 == 109) or (C1 == 77),
					(C2 == 97) or (C2 == 65), (C3 == 100) or (C3 == 68),
					(C4 == 100) or (C4 == 68), (C5 == 114) or (C5 == 82),
					C6 == 61 ->
				   {ok, [C1, C2, C3, C4, C5, C6], Tl};
			       (_) -> fail
			   end,
			   host()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2] = _YY, _T1} ->
		  try {'maddr-param', _YY2} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'lr-param'() ->
    fun (T) ->
	    __P = fun (<<C1, C2, Tl/binary>>)
			  when (C1 == 108) or (C1 == 76),
			       (C2 == 114) or (C2 == 82) ->
			  {ok, [C1, C2], Tl};
		      (_) -> fail
		  end,
	    case __P(T) of
	      {ok, _YY, _T1} ->
		  try lr of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'other-param'() ->
    fun (T) ->
	    __P = '__seq'([pname(),
			   '__repeat'(0, 1,
				      '__seq'([fun (<<61, Tl/binary>>) -> {ok, 61, Tl};
						   (_) -> fail
					       end,
					       pvalue()]))]),
	    case __P(T) of
	      {ok, [_YY1, _YY2] = _YY, _T1} ->
		  try case _YY2 of
			[[_, Val]] -> {'other-param', _YY1, Val};
			[] -> {'other-param', _YY1}
		      end
		  of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

pname() ->
    fun (T) ->
	    __P = '__repeat'(1, infinity, paramchar()), __P(T)
    end.

pvalue() ->
    fun (T) ->
	    __P = '__repeat'(1, infinity, paramchar()), __P(T)
    end.

paramchar() ->
    fun (T) ->
	    __P = '__alt'(['param-unreserved'(), unreserved(),
			   escaped()]),
	    __P(T)
    end.

'param-unreserved'() ->
    fun (T) ->
	    __P = fun (<<C, Tl/binary>>) when C == 36 ->
			  {ok, C, Tl};
		      (<<C, Tl/binary>>) when C == 38 -> {ok, C, Tl};
		      (<<C, Tl/binary>>) when C == 43 -> {ok, C, Tl};
		      (<<C, Tl/binary>>) when C == 47 -> {ok, C, Tl};
		      (<<C, Tl/binary>>) when C == 58 -> {ok, C, Tl};
		      (<<C, Tl/binary>>) when C == 91 -> {ok, C, Tl};
		      (<<C, Tl/binary>>) when C == 93 -> {ok, C, Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

headers() ->
    fun (T) ->
	    __P = '__seq'([fun (<<63, Tl/binary>>) -> {ok, 63, Tl};
			       (_) -> fail
			   end,
			   header(),
			   '__repeat'(0, infinity,
				      '__seq'([fun (<<38, Tl/binary>>) -> {ok, 38, Tl};
						   (_) -> fail
					       end,
					       header()]))]),
	    __P(T)
    end.

header() ->
    fun (T) ->
	    __P = '__seq'([hname(),
			   fun (<<61, Tl/binary>>) -> {ok, 61, Tl};
			       (_) -> fail
			   end,
			   hvalue()]),
	    __P(T)
    end.

hname() ->
    fun (T) ->
	    __P = '__repeat'(1, infinity,
			     '__alt'(['hnv-unreserved'(), unreserved(), escaped()])),
	    __P(T)
    end.

hvalue() ->
    fun (T) ->
	    __P = '__repeat'(0, infinity,
			     '__alt'(['hnv-unreserved'(), unreserved(), escaped()])),
	    __P(T)
    end.

'hnv-unreserved'() ->
    fun (T) ->
	    __P = fun (<<C, Tl/binary>>) when C == 36 ->
			  {ok, C, Tl};
		      (<<C, Tl/binary>>) when C == 43 -> {ok, C, Tl};
		      (<<C, Tl/binary>>) when C == 47 -> {ok, C, Tl};
		      (<<C, Tl/binary>>) when C == 58 -> {ok, C, Tl};
		      (<<C, Tl/binary>>) when C == 63 -> {ok, C, Tl};
		      (<<C, Tl/binary>>) when C == 91 -> {ok, C, Tl};
		      (<<C, Tl/binary>>) when C == 93 -> {ok, C, Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

'SIP-message'() ->
    fun (T) ->
	    __P = '__alt'(['Request'(), 'Response'()]), __P(T)
    end.

'Request'() ->
    fun (T) ->
	    __P = '__seq'(['Request-Line'(),
			   '__repeat'(0, infinity, 'message-header'()), 'CRLF'(),
			   '__repeat'(0, 1, 'message-body'())]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3, _YY4] = _YY, _T1} ->
		  try {'Request', _YY1, _YY2, _YY4} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'Request-Line'() ->
    fun (T) ->
	    __P = '__seq'(['Method'(), 'SP'(), 'Request-URI'(),
			   'SP'(), 'SIP-Version'(), 'CRLF'()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3, _YY4, _YY5, _YY6] = _YY, _T1} ->
		  try {'Request-Line', _YY1, _YY3, _YY5} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'Request-URI'() ->
    fun (T) ->
	    __P = '__alt'(['SIP-URI'(), 'SIPS-URI'(),
			   absoluteURI()]),
	    __P(T)
    end.

absoluteURI() ->
    fun (T) ->
	    __P = '__seq'([scheme(),
			   fun (<<58, Tl/binary>>) -> {ok, 58, Tl};
			       (_) -> fail
			   end,
			   '__alt'(['hier-part'(), 'opaque-part'()])]),
	    __P(T)
    end.

'hier-part'() ->
    fun (T) ->
	    __P = '__seq'(['__alt'(['net-path'(), 'abs-path'()]),
			   '__repeat'(0, 1,
				      '__seq'([fun (<<63, Tl/binary>>) -> {ok, 63, Tl};
						   (_) -> fail
					       end,
					       'query'()]))]),
	    __P(T)
    end.

'net-path'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, Tl/binary>>)
				   when C1 == 47, C2 == 47 ->
				   {ok, [C1, C2], Tl};
			       (_) -> fail
			   end,
			   authority(), '__repeat'(0, 1, 'abs-path'())]),
	    __P(T)
    end.

'abs-path'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<47, Tl/binary>>) -> {ok, 47, Tl};
			       (_) -> fail
			   end,
			   'path-segments'()]),
	    __P(T)
    end.

'opaque-part'() ->
    fun (T) ->
	    __P = '__seq'(['uric-no-slash'(),
			   '__repeat'(0, infinity, uric())]),
	    __P(T)
    end.

uric() ->
    fun (T) ->
	    __P = '__alt'([reserved(), unreserved(), escaped()]),
	    __P(T)
    end.

'uric-no-slash'() ->
    fun (T) ->
	    __P = '__alt'([fun (<<C, Tl/binary>>) when C == 36 ->
				   {ok, C, Tl};
			       (<<C, Tl/binary>>) when C == 38 -> {ok, C, Tl};
			       (<<C, Tl/binary>>) when (C >= 43) and (C =< 44) ->
				   {ok, C, Tl};
			       (<<C, Tl/binary>>) when (C >= 58) and (C =< 59) ->
				   {ok, C, Tl};
			       (<<C, Tl/binary>>) when C == 61 -> {ok, C, Tl};
			       (<<C, Tl/binary>>) when (C >= 63) and (C =< 64) ->
				   {ok, C, Tl};
			       (_) -> fail
			   end,
			   unreserved(), escaped()]),
	    __P(T)
    end.

'path-segments'() ->
    fun (T) ->
	    __P = '__seq'([segment(),
			   '__repeat'(0, infinity,
				      '__seq'([fun (<<47, Tl/binary>>) -> {ok, 47, Tl};
						   (_) -> fail
					       end,
					       segment()]))]),
	    __P(T)
    end.

segment() ->
    fun (T) ->
	    __P = '__seq'(['__repeat'(0, infinity, pchar()),
			   '__repeat'(0, infinity,
				      '__seq'([fun (<<59, Tl/binary>>) -> {ok, 59, Tl};
						   (_) -> fail
					       end,
					       param()]))]),
	    __P(T)
    end.

param() ->
    fun (T) ->
	    __P = '__repeat'(0, infinity, pchar()), __P(T)
    end.

pchar() ->
    fun (T) ->
	    __P = '__alt'([fun (<<C, Tl/binary>>) when C == 36 ->
				   {ok, C, Tl};
			       (<<C, Tl/binary>>) when C == 38 -> {ok, C, Tl};
			       (<<C, Tl/binary>>) when (C >= 43) and (C =< 44) ->
				   {ok, C, Tl};
			       (<<C, Tl/binary>>) when C == 58 -> {ok, C, Tl};
			       (<<C, Tl/binary>>) when C == 61 -> {ok, C, Tl};
			       (<<C, Tl/binary>>) when C == 64 -> {ok, C, Tl};
			       (_) -> fail
			   end,
			   unreserved(), escaped()]),
	    __P(T)
    end.

scheme() ->
    fun (T) ->
	    __P = '__seq'(['ALPHA'(),
			   '__repeat'(0, infinity,
				      '__alt'([fun (<<C, Tl/binary>>) when C == 43 ->
						       {ok, C, Tl};
						   (<<C, Tl/binary>>)
						       when (C >= 45) and (C =< 46) ->
						       {ok, C, Tl};
						   (_) -> fail
					       end,
					       'ALPHA'(), 'DIGIT'()]))]),
	    __P(T)
    end.

authority() ->
    fun (T) -> __P = '__alt'([srvr(), 'reg-name'()]), __P(T)
    end.

srvr() ->
    fun (T) ->
	    __P = '__repeat'(0, 1,
			     '__seq'(['__repeat'(0, 1,
						 '__seq'([userinfo(),
							  fun (<<64, Tl/binary>>) ->
								  {ok, 64, Tl};
							      (_) -> fail
							  end])),
				      hostport()])),
	    __P(T)
    end.

'reg-name'() ->
    fun (T) ->
	    __P = '__repeat'(1, infinity,
			     '__alt'([fun (<<C, Tl/binary>>) when C == 36 ->
					      {ok, C, Tl};
					  (<<C, Tl/binary>>) when C == 38 -> {ok, C, Tl};
					  (<<C, Tl/binary>>) when (C >= 43) and (C =< 44) ->
					      {ok, C, Tl};
					  (<<C, Tl/binary>>) when (C >= 58) and (C =< 59) ->
					      {ok, C, Tl};
					  (<<C, Tl/binary>>) when C == 61 -> {ok, C, Tl};
					  (<<C, Tl/binary>>) when C == 64 -> {ok, C, Tl};
					  (_) -> fail
				      end,
				      unreserved(), escaped()])),
	    __P(T)
    end.

'query'() ->
    fun (T) -> __P = '__repeat'(0, infinity, uric()), __P(T)
    end.

'SIP-Version'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 115) or (C1 == 83),
					(C2 == 105) or (C2 == 73), (C3 == 112) or (C3 == 80) ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<47, Tl/binary>>) -> {ok, 47, Tl};
			       (_) -> fail
			   end,
			   '__repeat'(1, infinity, 'DIGIT'()),
			   fun (<<46, Tl/binary>>) -> {ok, 46, Tl};
			       (_) -> fail
			   end,
			   '__repeat'(1, infinity, 'DIGIT'())]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3, _YY4, _YY5] = _YY, _T1} ->
		  try {'SIP-Version', _YY3 ++ [_YY4] ++ _YY5} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'message-header'() ->
    fun (T) ->
	    __P = '__seq'(['__alt'(['Accept'(), 'Accept-Encoding'(),
				    'Accept-Language'(), 'Alert-Info'(), 'Allow'(),
				    'Authentication-Info'(), 'Call-ID'(), 'Call-Info'(),
				    'Contact'(), 'Content-Disposition'(),
				    'Content-Encoding'(), 'Content-Language'(),
				    'Content-Length'(), 'Content-Type'(), 'CSeq'(),
				    'Date'(), 'Error-Info'(), 'Expires'(), 'From'(),
				    'In-Reply-To'(), 'Max-Forwards'(), 'MIME-Version'(),
				    'Min-Expires'(), 'Organization'(), 'Priority'(),
				    'Proxy-Authenticate'(), 'Proxy-Require'(),
				    'Record-Route'(), 'Reply-To'(), 'Require'(),
				    'Retry-After'(), 'Route'(), 'Server'(), 'Subject'(),
				    'Supported'(), 'Timestamp'(), 'To'(), 'Unsupported'(),
				    'User-Agent'(), 'Via'(), 'Warning'(),
				    'WWW-Authenticate'(), 'extension-header'()]),
			   'CRLF'()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2] = _YY, _T1} ->
		  try _YY1 of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'INVITEm'() ->
    fun (T) ->
	    __P = fun (<<C1, C2, C3, C4, C5, C6, Tl/binary>>)
			  when C1 == 73, C2 == 78, C3 == 86, C4 == 73, C5 == 84,
			       C6 == 69 ->
			  {ok, [C1, C2, C3, C4, C5, C6], Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

'ACKm'() ->
    fun (T) ->
	    __P = fun (<<C1, C2, C3, Tl/binary>>)
			  when C1 == 65, C2 == 67, C3 == 75 ->
			  {ok, [C1, C2, C3], Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

'OPTIONSm'() ->
    fun (T) ->
	    __P = fun (<<C1, C2, C3, C4, C5, C6, C7, Tl/binary>>)
			  when C1 == 79, C2 == 80, C3 == 84, C4 == 73, C5 == 79,
			       C6 == 78, C7 == 83 ->
			  {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

'BYEm'() ->
    fun (T) ->
	    __P = fun (<<C1, C2, C3, Tl/binary>>)
			  when C1 == 66, C2 == 89, C3 == 69 ->
			  {ok, [C1, C2, C3], Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

'CANCELm'() ->
    fun (T) ->
	    __P = fun (<<C1, C2, C3, C4, C5, C6, Tl/binary>>)
			  when C1 == 67, C2 == 65, C3 == 78, C4 == 67, C5 == 69,
			       C6 == 76 ->
			  {ok, [C1, C2, C3, C4, C5, C6], Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

'REGISTERm'() ->
    fun (T) ->
	    __P = fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
			 Tl/binary>>)
			  when C1 == 82, C2 == 69, C3 == 71, C4 == 73, C5 == 83,
			       C6 == 84, C7 == 69, C8 == 82 ->
			  {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

'Method'() ->
    fun (T) ->
	    __P = '__alt'(['INVITEm'(), 'ACKm'(), 'OPTIONSm'(),
			   'BYEm'(), 'CANCELm'(), 'REGISTERm'(),
			   'extension-method'()]),
	    __P(T)
    end.

'extension-method'() ->
    fun (T) -> __P = token(), __P(T) end.

'Response'() ->
    fun (T) ->
	    __P = '__seq'(['Status-Line'(),
			   '__repeat'(0, infinity, 'message-header'()), 'CRLF'(),
			   '__repeat'(0, 1, 'message-body'())]),
	    __P(T)
    end.

'Status-Line'() ->
    fun (T) ->
	    __P = '__seq'(['SIP-Version'(), 'SP'(), 'Status-Code'(),
			   'SP'(), 'Reason-Phrase'(), 'CRLF'()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3, _YY4, _YY5, _YY6] = _YY, _T1} ->
		  try {'Status-Line', _YY1, _YY3, _YY5} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'Status-Code'() ->
    fun (T) ->
	    __P = '__alt'(['Informational'(), 'Redirection'(),
			   'Success'(), 'Client-Error'(), 'Server-Error'(),
			   'Global-Failure'(), 'extension-code'()]),
	    __P(T)
    end.

'extension-code'() ->
    fun (T) -> __P = '__repeat'(3, 3, 'DIGIT'()), __P(T)
    end.

'Reason-Phrase'() ->
    fun (T) ->
	    __P = '__repeat'(0, infinity,
			     '__alt'([reserved(), unreserved(), escaped(),
				      'UTF8-NONASCII'(), 'UTF8-CONT'(), 'SP'(), 'HTAB'()])),
	    __P(T)
    end.

'Informational'() ->
    fun (T) ->
	    __P = '__alt'([fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 49, C2 == 48, C3 == 48 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 49, C2 == 56, C3 == 48 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 49, C2 == 56, C3 == 49 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 49, C2 == 56, C3 == 50 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 49, C2 == 56, C3 == 51 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end]),
	    __P(T)
    end.

'Success'() ->
    fun (T) ->
	    __P = fun (<<C1, C2, C3, Tl/binary>>)
			  when C1 == 50, C2 == 48, C3 == 48 ->
			  {ok, [C1, C2, C3], Tl};
		      (_) -> fail
		  end,
	    __P(T)
    end.

'Redirection'() ->
    fun (T) ->
	    __P = '__alt'([fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 51, C2 == 48, C3 == 48 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 51, C2 == 48, C3 == 49 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 51, C2 == 48, C3 == 50 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 51, C2 == 48, C3 == 53 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 51, C2 == 56, C3 == 48 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end]),
	    __P(T)
    end.

'Client-Error'() ->
    fun (T) ->
	    __P = '__alt'([fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 52, C2 == 48, C3 == 48 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 52, C2 == 48, C3 == 49 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 52, C2 == 48, C3 == 50 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 52, C2 == 48, C3 == 51 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 52, C2 == 48, C3 == 52 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 52, C2 == 48, C3 == 53 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 52, C2 == 48, C3 == 54 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 52, C2 == 48, C3 == 55 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 52, C2 == 48, C3 == 56 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 52, C2 == 49, C3 == 48 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 52, C2 == 49, C3 == 51 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 52, C2 == 49, C3 == 52 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 52, C2 == 49, C3 == 53 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 52, C2 == 49, C3 == 54 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 52, C2 == 50, C3 == 48 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 52, C2 == 50, C3 == 49 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 52, C2 == 50, C3 == 51 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 52, C2 == 56, C3 == 48 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 52, C2 == 56, C3 == 49 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 52, C2 == 56, C3 == 50 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 52, C2 == 56, C3 == 51 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 52, C2 == 56, C3 == 52 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 52, C2 == 56, C3 == 53 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 52, C2 == 56, C3 == 54 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 52, C2 == 56, C3 == 55 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 52, C2 == 56, C3 == 56 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 52, C2 == 57, C3 == 49 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 52, C2 == 57, C3 == 51 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end]),
	    __P(T)
    end.

'Server-Error'() ->
    fun (T) ->
	    __P = '__alt'([fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 53, C2 == 48, C3 == 48 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 53, C2 == 48, C3 == 49 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 53, C2 == 48, C3 == 50 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 53, C2 == 48, C3 == 51 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 53, C2 == 48, C3 == 52 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 53, C2 == 48, C3 == 53 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 53, C2 == 49, C3 == 51 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end]),
	    __P(T)
    end.

'Global-Failure'() ->
    fun (T) ->
	    __P = '__alt'([fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 54, C2 == 48, C3 == 48 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 54, C2 == 48, C3 == 51 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 54, C2 == 48, C3 == 52 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when C1 == 54, C2 == 48, C3 == 54 ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end]),
	    __P(T)
    end.

'Accept'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6,
				  Tl/binary>>)
				   when (C1 == 97) or (C1 == 65), (C2 == 99) or (C2 == 67),
					(C3 == 99) or (C3 == 67), (C4 == 101) or (C4 == 69),
					(C5 == 112) or (C5 == 80), (C6 == 116) or (C6 == 84) ->
				   {ok, [C1, C2, C3, C4, C5, C6], Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(),
			   '__repeat'(0, 1,
				      '__seq'(['accept-range'(),
					       '__repeat'(0, infinity,
							  '__seq'(['COMMA'(),
								   'accept-range'()]))]))]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try Accept = case _YY3 of
				 [] -> [];
				 [[[A1], As]] -> [A1 | [A || ['COMMA', A] <- As]]
			       end,
		      {'Accept', Accept}
		  of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'accept-range'() ->
    fun (T) ->
	    __P = '__seq'(['media-range'(),
			   '__repeat'(0, infinity,
				      '__seq'(['SEMI'(), 'accept-param'()]))]),
	    case __P(T) of
	      {ok, [_YY1, _YY2] = _YY, _T1} ->
		  try [_YY1 | [A || ['SEMI', A] <- _YY2]] of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'media-range'() ->
    fun (T) ->
	    __P = '__seq'(['__alt'([fun (<<C1, C2, C3, Tl/binary>>)
					    when C1 == 42, C2 == 47, C3 == 42 ->
					    {ok, [C1, C2, C3], Tl};
					(_) -> fail
				    end,
				    '__seq'(['m-type'(), 'SLASH'(),
					     fun (<<42, Tl/binary>>) -> {ok, 42, Tl};
						 (_) -> fail
					     end]),
				    '__seq'(['m-type'(), 'SLASH'(), 'm-subtype'()])]),
			   '__repeat'(0, infinity,
				      '__seq'(['SEMI'(), 'm-parameter'()]))]),
	    case __P(T) of
	      {ok, [_YY1, _YY2] = _YY, _T1} ->
		  try case _YY1 of
			[Type, 'SLASH', SubType] ->
			    {'media-range', Type, SubType}
		      end
		  of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'accept-param'() ->
    fun (T) ->
	    __P = '__alt'(['__seq'([fun (<<C, Tl/binary>>)
					    when C == 113 ->
					    {ok, C, Tl};
					(<<C, Tl/binary>>) when C == 81 -> {ok, C, Tl};
					(_) -> fail
				    end,
				    'EQUAL'(), qvalue()]),
			   'generic-param'()]),
	    __P(T)
    end.

qvalue() ->
    fun (T) ->
	    __P = '__alt'(['__seq'([fun (<<48, Tl/binary>>) ->
					    {ok, 48, Tl};
					(_) -> fail
				    end,
				    '__repeat'(0, 1,
					       '__seq'([fun (<<46, Tl/binary>>) ->
								{ok, 46, Tl};
							    (_) -> fail
							end,
							'__repeat'(0, 3, 'DIGIT'())]))]),
			   '__seq'([fun (<<49, Tl/binary>>) -> {ok, 49, Tl};
					(_) -> fail
				    end,
				    '__repeat'(0, 1,
					       '__seq'([fun (<<46, Tl/binary>>) ->
								{ok, 46, Tl};
							    (_) -> fail
							end,
							'__repeat'(0, 3,
								   fun (<<48, Tl/binary>>) ->
									   {ok, 48, Tl};
								       (_) -> fail
								   end)]))])]),
	    __P(T)
    end.

'generic-param'() ->
    fun (T) ->
	    __P = '__seq'([token(),
			   '__repeat'(0, 1, '__seq'(['EQUAL'(), 'gen-value'()]))]),
	    __P(T)
    end.

'gen-value'() ->
    fun (T) ->
	    __P = '__alt'([token(), host(), 'quoted-string'()]),
	    __P(T)
    end.

'Accept-Encoding'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
				  C9, C10, C11, C12, C13, C14, C15, Tl/binary>>)
				   when (C1 == 97) or (C1 == 65), (C2 == 99) or (C2 == 67),
					(C3 == 99) or (C3 == 67), (C4 == 101) or (C4 == 69),
					(C5 == 112) or (C5 == 80), (C6 == 116) or (C6 == 84),
					C7 == 45, (C8 == 101) or (C8 == 69),
					(C9 == 110) or (C9 == 78), (C10 == 99) or (C10 == 67),
					(C11 == 111) or (C11 == 79),
					(C12 == 100) or (C12 == 68),
					(C13 == 105) or (C13 == 73),
					(C14 == 110) or (C14 == 78),
					(C15 == 103) or (C15 == 71) ->
				   {ok,
				    [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13,
				     C14, C15],
				    Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(),
			   '__repeat'(0, 1,
				      '__seq'([encoding(),
					       '__repeat'(0, infinity,
							  '__seq'(['COMMA'(),
								   encoding()]))]))]),
	    __P(T)
    end.

encoding() ->
    fun (T) ->
	    __P = '__seq'([codings(),
			   '__repeat'(0, infinity,
				      '__seq'(['SEMI'(), 'accept-param'()]))]),
	    __P(T)
    end.

codings() ->
    fun (T) ->
	    __P = '__alt'([fun (<<C, Tl/binary>>) when C == 42 ->
				   {ok, C, Tl};
			       (_) -> fail
			   end,
			   'content-coding'()]),
	    __P(T)
    end.

'content-coding'() ->
    fun (T) -> __P = token(), __P(T) end.

'Accept-Language'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
				  C9, C10, C11, C12, C13, C14, C15, Tl/binary>>)
				   when (C1 == 97) or (C1 == 65), (C2 == 99) or (C2 == 67),
					(C3 == 99) or (C3 == 67), (C4 == 101) or (C4 == 69),
					(C5 == 112) or (C5 == 80), (C6 == 116) or (C6 == 84),
					C7 == 45, (C8 == 108) or (C8 == 76),
					(C9 == 97) or (C9 == 65), (C10 == 110) or (C10 == 78),
					(C11 == 103) or (C11 == 71),
					(C12 == 117) or (C12 == 85),
					(C13 == 97) or (C13 == 65),
					(C14 == 103) or (C14 == 71),
					(C15 == 101) or (C15 == 69) ->
				   {ok,
				    [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13,
				     C14, C15],
				    Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(),
			   '__repeat'(0, 1,
				      '__seq'([language(),
					       '__repeat'(0, infinity,
							  '__seq'(['COMMA'(),
								   language()]))]))]),
	    __P(T)
    end.

language() ->
    fun (T) ->
	    __P = '__seq'(['language-range'(),
			   '__repeat'(0, infinity,
				      '__seq'(['SEMI'(), 'accept-param'()]))]),
	    __P(T)
    end.

'language-range'() ->
    fun (T) ->
	    __P = '__alt'([fun (<<C, Tl/binary>>) when C == 42 ->
				   {ok, C, Tl};
			       (_) -> fail
			   end,
			   '__seq'(['__repeat'(1, 8, 'ALPHA'()),
				    '__repeat'(0, infinity,
					       '__seq'([fun (<<45, Tl/binary>>) ->
								{ok, 45, Tl};
							    (_) -> fail
							end,
							'__repeat'(1, 8, 'ALPHA'())]))])]),
	    __P(T)
    end.

'Alert-Info'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
				  C9, C10, Tl/binary>>)
				   when (C1 == 97) or (C1 == 65),
					(C2 == 108) or (C2 == 76), (C3 == 101) or (C3 == 69),
					(C4 == 114) or (C4 == 82), (C5 == 116) or (C5 == 84),
					C6 == 45, (C7 == 105) or (C7 == 73),
					(C8 == 110) or (C8 == 78), (C9 == 102) or (C9 == 70),
					(C10 == 111) or (C10 == 79) ->
				   {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10], Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(), 'alert-param'(),
			   '__repeat'(0, infinity,
				      '__seq'(['COMMA'(), 'alert-param'()]))]),
	    __P(T)
    end.

'alert-param'() ->
    fun (T) ->
	    __P = '__seq'(['LAQUOT'(), absoluteURI(), 'RAQUOT'(),
			   '__repeat'(0, infinity,
				      '__seq'(['SEMI'(), 'generic-param'()]))]),
	    __P(T)
    end.

'Allow'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, Tl/binary>>)
				   when (C1 == 97) or (C1 == 65),
					(C2 == 108) or (C2 == 76), (C3 == 108) or (C3 == 76),
					(C4 == 111) or (C4 == 79), (C5 == 119) or (C5 == 87) ->
				   {ok, [C1, C2, C3, C4, C5], Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(),
			   '__repeat'(0, 1,
				      '__seq'(['Method'(),
					       '__repeat'(0, infinity,
							  '__seq'(['COMMA'(),
								   'Method'()]))]))]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try Allowed = case _YY3 of
				  [] -> [];
				  [[M1, Ms]] -> [M1 | [M || ['COMMA', M] <- Ms]]
				end,
		      {'Allow', Allowed}
		  of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'Authorization'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
				  C9, C10, C11, C12, C13, Tl/binary>>)
				   when (C1 == 97) or (C1 == 65),
					(C2 == 117) or (C2 == 85), (C3 == 116) or (C3 == 84),
					(C4 == 104) or (C4 == 72), (C5 == 111) or (C5 == 79),
					(C6 == 114) or (C6 == 82), (C7 == 105) or (C7 == 73),
					(C8 == 122) or (C8 == 90), (C9 == 97) or (C9 == 65),
					(C10 == 116) or (C10 == 84),
					(C11 == 105) or (C11 == 73),
					(C12 == 111) or (C12 == 79),
					(C13 == 110) or (C13 == 78) ->
				   {ok,
				    [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12,
				     C13],
				    Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(), credentials()]),
	    __P(T)
    end.

credentials() ->
    fun (T) ->
	    __P = '__alt'(['__seq'([fun (<<C1, C2, C3, C4, C5, C6,
					   Tl/binary>>)
					    when (C1 == 100) or (C1 == 68),
						 (C2 == 105) or (C2 == 73),
						 (C3 == 103) or (C3 == 71),
						 (C4 == 101) or (C4 == 69),
						 (C5 == 115) or (C5 == 83),
						 (C6 == 116) or (C6 == 84) ->
					    {ok, [C1, C2, C3, C4, C5, C6], Tl};
					(_) -> fail
				    end,
				    'LWS'(), 'digest-response'()]),
			   'other-response'()]),
	    __P(T)
    end.

'digest-response'() ->
    fun (T) ->
	    __P = '__seq'(['dig-resp'(),
			   '__repeat'(0, infinity,
				      '__seq'(['COMMA'(), 'dig-resp'()]))]),
	    __P(T)
    end.

'dig-resp'() ->
    fun (T) ->
	    __P = '__alt'([username(), realm(), nonce(),
			   'digest-uri'(), dresponse(), algorithm(), cnonce(),
			   opaque(), 'message-qop'(), 'nonce-count'(),
			   'auth-param'()]),
	    __P(T)
    end.

username() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
				  Tl/binary>>)
				   when (C1 == 117) or (C1 == 85),
					(C2 == 115) or (C2 == 83), (C3 == 101) or (C3 == 69),
					(C4 == 114) or (C4 == 82), (C5 == 110) or (C5 == 78),
					(C6 == 97) or (C6 == 65), (C7 == 109) or (C7 == 77),
					(C8 == 101) or (C8 == 69) ->
				   {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
			       (_) -> fail
			   end,
			   'EQUAL'(), 'username-value'()]),
	    __P(T)
    end.

'username-value'() ->
    fun (T) -> __P = 'quoted-string'(), __P(T) end.

'digest-uri'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 117) or (C1 == 85),
					(C2 == 114) or (C2 == 82), (C3 == 105) or (C3 == 73) ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   'EQUAL'(), 'LDQUOT'(), 'digest-uri-value'(),
			   'RDQUOT'()]),
	    __P(T)
    end.

'digest-uri-value'() ->
    fun (T) -> __P = 'rquest-uri'(), __P(T) end.

'message-qop'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 113) or (C1 == 81),
					(C2 == 111) or (C2 == 79), (C3 == 112) or (C3 == 80) ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   'EQUAL'(), 'qop-value'()]),
	    __P(T)
    end.

cnonce() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6,
				  Tl/binary>>)
				   when (C1 == 99) or (C1 == 67),
					(C2 == 110) or (C2 == 78), (C3 == 111) or (C3 == 79),
					(C4 == 110) or (C4 == 78), (C5 == 99) or (C5 == 67),
					(C6 == 101) or (C6 == 69) ->
				   {ok, [C1, C2, C3, C4, C5, C6], Tl};
			       (_) -> fail
			   end,
			   'EQUAL'(), 'cnonce-value'()]),
	    __P(T)
    end.

'cnonce-value'() ->
    fun (T) -> __P = 'nonce-value'(), __P(T) end.

'nonce-count'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, Tl/binary>>)
				   when (C1 == 110) or (C1 == 78),
					(C2 == 99) or (C2 == 67) ->
				   {ok, [C1, C2], Tl};
			       (_) -> fail
			   end,
			   'EQUAL'(), 'nc-value'()]),
	    __P(T)
    end.

'nc-value'() ->
    fun (T) -> __P = '__repeat'(8, 8, 'LHEX'()), __P(T) end.

dresponse() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
				  Tl/binary>>)
				   when (C1 == 114) or (C1 == 82),
					(C2 == 101) or (C2 == 69), (C3 == 115) or (C3 == 83),
					(C4 == 112) or (C4 == 80), (C5 == 111) or (C5 == 79),
					(C6 == 110) or (C6 == 78), (C7 == 115) or (C7 == 83),
					(C8 == 101) or (C8 == 69) ->
				   {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
			       (_) -> fail
			   end,
			   'EQUAL'(), 'request-digest'()]),
	    __P(T)
    end.

'request-digest'() ->
    fun (T) ->
	    __P = '__seq'(['LDQUOT'(), '__repeat'(32, 32, 'LHEX'()),
			   'RDQUOT'()]),
	    __P(T)
    end.

'auth-param'() ->
    fun (T) ->
	    __P = '__seq'(['auth-param-name'(), 'EQUAL'(),
			   '__alt'([token(), 'quoted-string'()])]),
	    __P(T)
    end.

'auth-param-name'() ->
    fun (T) -> __P = token(), __P(T) end.

'other-response'() ->
    fun (T) ->
	    __P = '__seq'(['auth-scheme'(), 'LWS'(), 'auth-param'(),
			   '__repeat'(0, infinity,
				      '__seq'(['COMMA'(), 'auth-param'()]))]),
	    __P(T)
    end.

'auth-scheme'() -> fun (T) -> __P = token(), __P(T) end.

'Authentication-Info'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
				  C9, C10, C11, C12, C13, C14, C15, C16, C17, C18, C19,
				  Tl/binary>>)
				   when (C1 == 97) or (C1 == 65),
					(C2 == 117) or (C2 == 85), (C3 == 116) or (C3 == 84),
					(C4 == 104) or (C4 == 72), (C5 == 101) or (C5 == 69),
					(C6 == 110) or (C6 == 78), (C7 == 116) or (C7 == 84),
					(C8 == 105) or (C8 == 73), (C9 == 99) or (C9 == 67),
					(C10 == 97) or (C10 == 65),
					(C11 == 116) or (C11 == 84),
					(C12 == 105) or (C12 == 73),
					(C13 == 111) or (C13 == 79),
					(C14 == 110) or (C14 == 78), C15 == 45,
					(C16 == 105) or (C16 == 73),
					(C17 == 110) or (C17 == 78),
					(C18 == 102) or (C18 == 70),
					(C19 == 111) or (C19 == 79) ->
				   {ok,
				    [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13,
				     C14, C15, C16, C17, C18, C19],
				    Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(), ainfo(),
			   '__repeat'(0, infinity,
				      '__seq'(['COMMA'(), ainfo()]))]),
	    __P(T)
    end.

ainfo() ->
    fun (T) ->
	    __P = '__alt'([nextnonce(), 'message-qop'(),
			   'response-auth'(), cnonce(), 'nonce-count'()]),
	    __P(T)
    end.

nextnonce() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
				  C9, Tl/binary>>)
				   when (C1 == 110) or (C1 == 78),
					(C2 == 101) or (C2 == 69), (C3 == 120) or (C3 == 88),
					(C4 == 116) or (C4 == 84), (C5 == 110) or (C5 == 78),
					(C6 == 111) or (C6 == 79), (C7 == 110) or (C7 == 78),
					(C8 == 99) or (C8 == 67), (C9 == 101) or (C9 == 69) ->
				   {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
			       (_) -> fail
			   end,
			   'EQUAL'(), 'nonce-value'()]),
	    __P(T)
    end.

'response-auth'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7,
				  Tl/binary>>)
				   when (C1 == 114) or (C1 == 82),
					(C2 == 115) or (C2 == 83), (C3 == 112) or (C3 == 80),
					(C4 == 97) or (C4 == 65), (C5 == 117) or (C5 == 85),
					(C6 == 116) or (C6 == 84), (C7 == 104) or (C7 == 72) ->
				   {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
			       (_) -> fail
			   end,
			   'EQUAL'(), 'response-digest'()]),
	    __P(T)
    end.

'response-digest'() ->
    fun (T) ->
	    __P = '__seq'(['LDQUOT'(),
			   '__repeat'(0, infinity, 'LHEX'()), 'RDQUOT'()]),
	    __P(T)
    end.

'Call-ID'() ->
    fun (T) ->
	    __P = '__seq'(['__alt'([fun (<<C1, C2, C3, C4, C5, C6,
					   C7, Tl/binary>>)
					    when (C1 == 99) or (C1 == 67),
						 (C2 == 97) or (C2 == 65),
						 (C3 == 108) or (C3 == 76),
						 (C4 == 108) or (C4 == 76), C5 == 45,
						 (C6 == 105) or (C6 == 73),
						 (C7 == 100) or (C7 == 68) ->
					    {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
					(_) -> fail
				    end,
				    fun (<<C, Tl/binary>>) when C == 105 -> {ok, C, Tl};
					(<<C, Tl/binary>>) when C == 73 -> {ok, C, Tl};
					(_) -> fail
				    end]),
			   'HCOLON'(), callid()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try {'Call-ID', _YY3} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

callid() ->
    fun (T) ->
	    __P = '__seq'([word(),
			   '__repeat'(0, 1,
				      '__seq'([fun (<<64, Tl/binary>>) -> {ok, 64, Tl};
						   (_) -> fail
					       end,
					       word()]))]),
	    case __P(T) of
	      {ok, [_YY1, _YY2] = _YY, _T1} ->
		  try lists:flatten(_YY) of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'Call-Info'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
				  C9, Tl/binary>>)
				   when (C1 == 99) or (C1 == 67), (C2 == 97) or (C2 == 65),
					(C3 == 108) or (C3 == 76), (C4 == 108) or (C4 == 76),
					C5 == 45, (C6 == 105) or (C6 == 73),
					(C7 == 110) or (C7 == 78), (C8 == 102) or (C8 == 70),
					(C9 == 111) or (C9 == 79) ->
				   {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(), info(),
			   '__repeat'(0, infinity, '__seq'(['COMMA'(), info()]))]),
	    __P(T)
    end.

info() ->
    fun (T) ->
	    __P = '__seq'(['LAQUOT'(), absoluteURI(), 'RAQUOT'(),
			   '__repeat'(0, infinity,
				      '__seq'(['SEMI'(), 'info-param'()]))]),
	    __P(T)
    end.

'info-param'() ->
    fun (T) ->
	    __P = '__alt'(['__seq'([fun (<<C1, C2, C3, C4, C5, C6,
					   C7, Tl/binary>>)
					    when (C1 == 112) or (C1 == 80),
						 (C2 == 117) or (C2 == 85),
						 (C3 == 114) or (C3 == 82),
						 (C4 == 112) or (C4 == 80),
						 (C5 == 111) or (C5 == 79),
						 (C6 == 115) or (C6 == 83),
						 (C7 == 101) or (C7 == 69) ->
					    {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
					(_) -> fail
				    end,
				    'EQUAL'(),
				    '__alt'([fun (<<C1, C2, C3, C4, Tl/binary>>)
						     when (C1 == 105) or (C1 == 73),
							  (C2 == 99) or (C2 == 67),
							  (C3 == 111) or (C3 == 79),
							  (C4 == 110) or (C4 == 78) ->
						     {ok, [C1, C2, C3, C4], Tl};
						 (_) -> fail
					     end,
					     fun (<<C1, C2, C3, C4, Tl/binary>>)
						     when (C1 == 105) or (C1 == 73),
							  (C2 == 110) or (C2 == 78),
							  (C3 == 102) or (C3 == 70),
							  (C4 == 111) or (C4 == 79) ->
						     {ok, [C1, C2, C3, C4], Tl};
						 (_) -> fail
					     end,
					     fun (<<C1, C2, C3, C4, Tl/binary>>)
						     when (C1 == 99) or (C1 == 67),
							  (C2 == 97) or (C2 == 65),
							  (C3 == 114) or (C3 == 82),
							  (C4 == 100) or (C4 == 68) ->
						     {ok, [C1, C2, C3, C4], Tl};
						 (_) -> fail
					     end,
					     token()])]),
			   'generic-param'()]),
	    __P(T)
    end.

'Contact'() ->
    fun (T) ->
	    __P = '__seq'(['__alt'([fun (<<C1, C2, C3, C4, C5, C6,
					   C7, Tl/binary>>)
					    when (C1 == 99) or (C1 == 67),
						 (C2 == 111) or (C2 == 79),
						 (C3 == 110) or (C3 == 78),
						 (C4 == 116) or (C4 == 84),
						 (C5 == 97) or (C5 == 65),
						 (C6 == 99) or (C6 == 67),
						 (C7 == 116) or (C7 == 84) ->
					    {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
					(_) -> fail
				    end,
				    fun (<<C, Tl/binary>>) when C == 109 -> {ok, C, Tl};
					(<<C, Tl/binary>>) when C == 77 -> {ok, C, Tl};
					(_) -> fail
				    end]),
			   'HCOLON'(),
			   '__alt'(['STAR'(),
				    '__seq'(['contact-param'(),
					     '__repeat'(0, infinity,
							'__seq'(['COMMA'(),
								 'contact-param'()]))])])]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try {'Contact', _YY3} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'contact-param'() ->
    fun (T) ->
	    __P = '__seq'(['__alt'(['name-addr'(), 'addr-spec'()]),
			   '__repeat'(0, infinity,
				      '__seq'(['SEMI'(), 'contact-params'()]))]),
	    __P(T)
    end.

'name-addr'() ->
    fun (T) ->
	    __P = '__seq'(['__repeat'(0, 1, 'display-name'()),
			   'LAQUOT'(), 'addr-spec'(), 'RAQUOT'()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3, _YY4] = _YY, _T1} ->
		  try {'name-addr', _YY1, _YY3} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'addr-spec'() ->
    fun (T) ->
	    __P = '__alt'(['SIP-URI'(), 'SIPS-URI'(),
			   absoluteURI()]),
	    __P(T)
    end.

'display-name'() ->
    fun (T) ->
	    __P = '__alt'(['quoted-string'(),
			   '__repeat'(0, infinity, '__seq'([token(), 'LWS'()]))]),
	    __P(T)
    end.

'contact-params'() ->
    fun (T) ->
	    __P = '__alt'(['c-p-q'(), 'c-p-expires'(),
			   'contact-extension'()]),
	    __P(T)
    end.

'c-p-q'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C, Tl/binary>>) when C == 113 ->
				   {ok, C, Tl};
			       (<<C, Tl/binary>>) when C == 81 -> {ok, C, Tl};
			       (_) -> fail
			   end,
			   'EQUAL'(), qvalue()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try {'c-p-q', _YY3} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'c-p-expires'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7,
				  Tl/binary>>)
				   when (C1 == 101) or (C1 == 69),
					(C2 == 120) or (C2 == 88), (C3 == 112) or (C3 == 80),
					(C4 == 105) or (C4 == 73), (C5 == 114) or (C5 == 82),
					(C6 == 101) or (C6 == 69), (C7 == 115) or (C7 == 83) ->
				   {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
			       (_) -> fail
			   end,
			   'EQUAL'(), 'delta-seconds'()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try {'c-p-expires', _YY3} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'contact-extension'() ->
    fun (T) ->
	    __P = 'generic-param'(),
	    case __P(T) of
	      {ok, _YY, _T1} ->
		  try {'contact-extension', _YY} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'delta-seconds'() ->
    fun (T) ->
	    __P = '__repeat'(1, infinity, 'DIGIT'()),
	    case __P(T) of
	      {ok, _YY, _T1} ->
		  try list_to_integer(_YY) of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'Content-Disposition'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
				  C9, C10, C11, C12, C13, C14, C15, C16, C17, C18, C19,
				  Tl/binary>>)
				   when (C1 == 99) or (C1 == 67),
					(C2 == 111) or (C2 == 79), (C3 == 110) or (C3 == 78),
					(C4 == 116) or (C4 == 84), (C5 == 101) or (C5 == 69),
					(C6 == 110) or (C6 == 78), (C7 == 116) or (C7 == 84),
					C8 == 45, (C9 == 100) or (C9 == 68),
					(C10 == 105) or (C10 == 73),
					(C11 == 115) or (C11 == 83),
					(C12 == 112) or (C12 == 80),
					(C13 == 111) or (C13 == 79),
					(C14 == 115) or (C14 == 83),
					(C15 == 105) or (C15 == 73),
					(C16 == 116) or (C16 == 84),
					(C17 == 105) or (C17 == 73),
					(C18 == 111) or (C18 == 79),
					(C19 == 110) or (C19 == 78) ->
				   {ok,
				    [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13,
				     C14, C15, C16, C17, C18, C19],
				    Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(), 'disp-type'(),
			   '__repeat'(0, infinity,
				      '__seq'(['SEMI'(), 'disp-param'()]))]),
	    __P(T)
    end.

'disp-type'() ->
    fun (T) ->
	    __P = '__alt'([fun (<<C1, C2, C3, C4, C5, C6,
				  Tl/binary>>)
				   when (C1 == 114) or (C1 == 82),
					(C2 == 101) or (C2 == 69), (C3 == 110) or (C3 == 78),
					(C4 == 100) or (C4 == 68), (C5 == 101) or (C5 == 69),
					(C6 == 114) or (C6 == 82) ->
				   {ok, [C1, C2, C3, C4, C5, C6], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, C4, C5, C6, C7, Tl/binary>>)
				   when (C1 == 115) or (C1 == 83),
					(C2 == 101) or (C2 == 69), (C3 == 115) or (C3 == 83),
					(C4 == 115) or (C4 == 83), (C5 == 105) or (C5 == 73),
					(C6 == 111) or (C6 == 79), (C7 == 110) or (C7 == 78) ->
				   {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, C4, Tl/binary>>)
				   when (C1 == 105) or (C1 == 73),
					(C2 == 99) or (C2 == 67), (C3 == 111) or (C3 == 79),
					(C4 == 110) or (C4 == 78) ->
				   {ok, [C1, C2, C3, C4], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, C4, C5, Tl/binary>>)
				   when (C1 == 97) or (C1 == 65),
					(C2 == 108) or (C2 == 76), (C3 == 101) or (C3 == 69),
					(C4 == 114) or (C4 == 82), (C5 == 116) or (C5 == 84) ->
				   {ok, [C1, C2, C3, C4, C5], Tl};
			       (_) -> fail
			   end,
			   'disp-extension-token'()]),
	    __P(T)
    end.

'disp-param'() ->
    fun (T) ->
	    __P = '__alt'(['handling-param'(), 'generic-param'()]),
	    __P(T)
    end.

'handling-param'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
				  Tl/binary>>)
				   when (C1 == 104) or (C1 == 72),
					(C2 == 97) or (C2 == 65), (C3 == 110) or (C3 == 78),
					(C4 == 100) or (C4 == 68), (C5 == 108) or (C5 == 76),
					(C6 == 105) or (C6 == 73), (C7 == 110) or (C7 == 78),
					(C8 == 103) or (C8 == 71) ->
				   {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
			       (_) -> fail
			   end,
			   'EQUAL'(),
			   '__alt'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
					   Tl/binary>>)
					    when (C1 == 111) or (C1 == 79),
						 (C2 == 112) or (C2 == 80),
						 (C3 == 116) or (C3 == 84),
						 (C4 == 105) or (C4 == 73),
						 (C5 == 111) or (C5 == 79),
						 (C6 == 110) or (C6 == 78),
						 (C7 == 97) or (C7 == 65),
						 (C8 == 108) or (C8 == 76) ->
					    {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
					(_) -> fail
				    end,
				    fun (<<C1, C2, C3, C4, C5, C6, C7, C8, Tl/binary>>)
					    when (C1 == 114) or (C1 == 82),
						 (C2 == 101) or (C2 == 69),
						 (C3 == 113) or (C3 == 81),
						 (C4 == 117) or (C4 == 85),
						 (C5 == 105) or (C5 == 73),
						 (C6 == 114) or (C6 == 82),
						 (C7 == 101) or (C7 == 69),
						 (C8 == 100) or (C8 == 68) ->
					    {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
					(_) -> fail
				    end,
				    'other-handling'()])]),
	    __P(T)
    end.

'other-handling'() ->
    fun (T) -> __P = token(), __P(T) end.

'disp-extension-token'() ->
    fun (T) -> __P = token(), __P(T) end.

'Content-Encoding'() ->
    fun (T) ->
	    __P = '__seq'(['__alt'([fun (<<C1, C2, C3, C4, C5, C6,
					   C7, C8, C9, C10, C11, C12, C13, C14, C15, C16,
					   Tl/binary>>)
					    when (C1 == 99) or (C1 == 67),
						 (C2 == 111) or (C2 == 79),
						 (C3 == 110) or (C3 == 78),
						 (C4 == 116) or (C4 == 84),
						 (C5 == 101) or (C5 == 69),
						 (C6 == 110) or (C6 == 78),
						 (C7 == 116) or (C7 == 84), C8 == 45,
						 (C9 == 101) or (C9 == 69),
						 (C10 == 110) or (C10 == 78),
						 (C11 == 99) or (C11 == 67),
						 (C12 == 111) or (C12 == 79),
						 (C13 == 100) or (C13 == 68),
						 (C14 == 105) or (C14 == 73),
						 (C15 == 110) or (C15 == 78),
						 (C16 == 103) or (C16 == 71) ->
					    {ok,
					     [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11,
					      C12, C13, C14, C15, C16],
					     Tl};
					(_) -> fail
				    end,
				    fun (<<C, Tl/binary>>) when C == 101 -> {ok, C, Tl};
					(<<C, Tl/binary>>) when C == 69 -> {ok, C, Tl};
					(_) -> fail
				    end]),
			   'HCOLON'(), 'content-coding'(),
			   '__repeat'(0, infinity,
				      '__seq'(['COMMA'(), 'content-coding'()]))]),
	    __P(T)
    end.

'Content-Language'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
				  C9, C10, C11, C12, C13, C14, C15, C16, Tl/binary>>)
				   when (C1 == 99) or (C1 == 67),
					(C2 == 111) or (C2 == 79), (C3 == 110) or (C3 == 78),
					(C4 == 116) or (C4 == 84), (C5 == 101) or (C5 == 69),
					(C6 == 110) or (C6 == 78), (C7 == 116) or (C7 == 84),
					C8 == 45, (C9 == 108) or (C9 == 76),
					(C10 == 97) or (C10 == 65),
					(C11 == 110) or (C11 == 78),
					(C12 == 103) or (C12 == 71),
					(C13 == 117) or (C13 == 85),
					(C14 == 97) or (C14 == 65),
					(C15 == 103) or (C15 == 71),
					(C16 == 101) or (C16 == 69) ->
				   {ok,
				    [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13,
				     C14, C15, C16],
				    Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(), 'language-tag'(),
			   '__repeat'(0, infinity,
				      '__seq'(['COMMA'(), 'language-tag'()]))]),
	    __P(T)
    end.

'language-tag'() ->
    fun (T) ->
	    __P = '__seq'(['primary-tag'(),
			   '__repeat'(0, infinity,
				      '__seq'([fun (<<45, Tl/binary>>) -> {ok, 45, Tl};
						   (_) -> fail
					       end,
					       subtag()]))]),
	    __P(T)
    end.

'primary-tag'() ->
    fun (T) -> __P = '__repeat'(1, 8, 'ALPHA'()), __P(T)
    end.

subtag() ->
    fun (T) -> __P = '__repeat'(1, 8, 'ALPHA'()), __P(T)
    end.

'Content-Length'() ->
    fun (T) ->
	    __P = '__seq'(['__alt'([fun (<<C1, C2, C3, C4, C5, C6,
					   C7, C8, C9, C10, C11, C12, C13, C14, Tl/binary>>)
					    when (C1 == 99) or (C1 == 67),
						 (C2 == 111) or (C2 == 79),
						 (C3 == 110) or (C3 == 78),
						 (C4 == 116) or (C4 == 84),
						 (C5 == 101) or (C5 == 69),
						 (C6 == 110) or (C6 == 78),
						 (C7 == 116) or (C7 == 84), C8 == 45,
						 (C9 == 108) or (C9 == 76),
						 (C10 == 101) or (C10 == 69),
						 (C11 == 110) or (C11 == 78),
						 (C12 == 103) or (C12 == 71),
						 (C13 == 116) or (C13 == 84),
						 (C14 == 104) or (C14 == 72) ->
					    {ok,
					     [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11,
					      C12, C13, C14],
					     Tl};
					(_) -> fail
				    end,
				    fun (<<C, Tl/binary>>) when C == 108 -> {ok, C, Tl};
					(<<C, Tl/binary>>) when C == 76 -> {ok, C, Tl};
					(_) -> fail
				    end]),
			   'HCOLON'(), '__repeat'(1, infinity, 'DIGIT'())]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try {'Content-Length', list_to_integer(_YY3)} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'Content-Type'() ->
    fun (T) ->
	    __P = '__seq'(['__alt'([fun (<<C1, C2, C3, C4, C5, C6,
					   C7, C8, C9, C10, C11, C12, Tl/binary>>)
					    when (C1 == 99) or (C1 == 67),
						 (C2 == 111) or (C2 == 79),
						 (C3 == 110) or (C3 == 78),
						 (C4 == 116) or (C4 == 84),
						 (C5 == 101) or (C5 == 69),
						 (C6 == 110) or (C6 == 78),
						 (C7 == 116) or (C7 == 84), C8 == 45,
						 (C9 == 116) or (C9 == 84),
						 (C10 == 121) or (C10 == 89),
						 (C11 == 112) or (C11 == 80),
						 (C12 == 101) or (C12 == 69) ->
					    {ok,
					     [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11,
					      C12],
					     Tl};
					(_) -> fail
				    end,
				    fun (<<C, Tl/binary>>) when C == 99 -> {ok, C, Tl};
					(<<C, Tl/binary>>) when C == 67 -> {ok, C, Tl};
					(_) -> fail
				    end]),
			   'HCOLON'(), 'media-type'()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try {'Content-Type', _YY3} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'media-type'() ->
    fun (T) ->
	    __P = '__seq'(['m-type'(), 'SLASH'(), 'm-subtype'(),
			   '__repeat'(0, infinity,
				      '__seq'(['SEMI'(), 'm-parameter'()]))]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3, _YY4] = _YY, _T1} ->
		  try {'media-type', _YY1, _YY3,
		       [P || ['SEMI', P] <- _YY4]}
		  of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'm-type'() ->
    fun (T) ->
	    __P = '__alt'(['discrete-type'(), 'composite-type'()]),
	    __P(T)
    end.

'discrete-type'() ->
    fun (T) ->
	    __P = '__alt'([fun (<<C1, C2, C3, C4, Tl/binary>>)
				   when (C1 == 116) or (C1 == 84),
					(C2 == 101) or (C2 == 69), (C3 == 120) or (C3 == 88),
					(C4 == 116) or (C4 == 84) ->
				   {ok, [C1, C2, C3, C4], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, C4, C5, Tl/binary>>)
				   when (C1 == 105) or (C1 == 73),
					(C2 == 109) or (C2 == 77), (C3 == 97) or (C3 == 65),
					(C4 == 103) or (C4 == 71), (C5 == 101) or (C5 == 69) ->
				   {ok, [C1, C2, C3, C4, C5], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, C4, C5, Tl/binary>>)
				   when (C1 == 97) or (C1 == 65),
					(C2 == 117) or (C2 == 85), (C3 == 100) or (C3 == 68),
					(C4 == 105) or (C4 == 73), (C5 == 111) or (C5 == 79) ->
				   {ok, [C1, C2, C3, C4, C5], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, C4, C5, Tl/binary>>)
				   when (C1 == 118) or (C1 == 86),
					(C2 == 105) or (C2 == 73), (C3 == 100) or (C3 == 68),
					(C4 == 101) or (C4 == 69), (C5 == 111) or (C5 == 79) ->
				   {ok, [C1, C2, C3, C4, C5], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11,
				  Tl/binary>>)
				   when (C1 == 97) or (C1 == 65),
					(C2 == 112) or (C2 == 80), (C3 == 112) or (C3 == 80),
					(C4 == 108) or (C4 == 76), (C5 == 105) or (C5 == 73),
					(C6 == 99) or (C6 == 67), (C7 == 97) or (C7 == 65),
					(C8 == 116) or (C8 == 84), (C9 == 105) or (C9 == 73),
					(C10 == 111) or (C10 == 79),
					(C11 == 110) or (C11 == 78) ->
				   {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11],
				    Tl};
			       (_) -> fail
			   end,
			   'extension-token'()]),
	    __P(T)
    end.

'composite-type'() ->
    fun (T) ->
	    __P = '__alt'([fun (<<C1, C2, C3, C4, C5, C6, C7,
				  Tl/binary>>)
				   when (C1 == 109) or (C1 == 77),
					(C2 == 101) or (C2 == 69), (C3 == 115) or (C3 == 83),
					(C4 == 115) or (C4 == 83), (C5 == 97) or (C5 == 65),
					(C6 == 103) or (C6 == 71), (C7 == 101) or (C7 == 69) ->
				   {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, C4, C5, C6, C7, C8, C9, Tl/binary>>)
				   when (C1 == 109) or (C1 == 77),
					(C2 == 117) or (C2 == 85), (C3 == 108) or (C3 == 76),
					(C4 == 116) or (C4 == 84), (C5 == 105) or (C5 == 73),
					(C6 == 112) or (C6 == 80), (C7 == 97) or (C7 == 65),
					(C8 == 114) or (C8 == 82), (C9 == 116) or (C9 == 84) ->
				   {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
			       (_) -> fail
			   end,
			   'extension-token'()]),
	    __P(T)
    end.

'extension-token'() ->
    fun (T) ->
	    __P = '__alt'(['ietf-token'(), 'x-token'()]), __P(T)
    end.

'ietf-token'() -> fun (T) -> __P = token(), __P(T) end.

'x-token'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, Tl/binary>>)
				   when (C1 == 120) or (C1 == 88), C2 == 45 ->
				   {ok, [C1, C2], Tl};
			       (_) -> fail
			   end,
			   token()]),
	    __P(T)
    end.

'm-subtype'() ->
    fun (T) ->
	    __P = '__alt'(['extension-token'(), 'iana-token'()]),
	    __P(T)
    end.

'iana-token'() -> fun (T) -> __P = token(), __P(T) end.

'm-parameter'() ->
    fun (T) ->
	    __P = '__seq'(['m-attribute'(), 'EQUAL'(),
			   'm-value'()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try {'m-parameter', _YY1, _YY3} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'm-attribute'() -> fun (T) -> __P = token(), __P(T) end.

'm-value'() ->
    fun (T) ->
	    __P = '__alt'([token(), 'quoted-string'()]), __P(T)
    end.

'CSeq'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, Tl/binary>>)
				   when (C1 == 99) or (C1 == 67),
					(C2 == 115) or (C2 == 83), (C3 == 101) or (C3 == 69),
					(C4 == 113) or (C4 == 81) ->
				   {ok, [C1, C2, C3, C4], Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(), '__repeat'(1, infinity, 'DIGIT'()), 'LWS'(),
			   'Method'()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3, _YY4, _YY5] = _YY, _T1} ->
		  try {'CSeq', list_to_integer(_YY3), _YY5} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'Date'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, Tl/binary>>)
				   when (C1 == 100) or (C1 == 68),
					(C2 == 97) or (C2 == 65), (C3 == 116) or (C3 == 84),
					(C4 == 101) or (C4 == 69) ->
				   {ok, [C1, C2, C3, C4], Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(), 'SIP-date'()]),
	    __P(T)
    end.

'SIP-date'() ->
    fun (T) -> __P = 'rfc1123-date'(), __P(T) end.

'rfc1123-date'() ->
    fun (T) ->
	    __P = '__seq'([wkday(),
			   fun (<<44, Tl/binary>>) -> {ok, 44, Tl};
			       (_) -> fail
			   end,
			   'SP'(), date1(), 'SP'(), timex(), 'SP'(),
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 103) or (C1 == 71),
					(C2 == 109) or (C2 == 77), (C3 == 116) or (C3 == 84) ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end]),
	    __P(T)
    end.

date1() ->
    fun (T) ->
	    __P = '__seq'(['__repeat'(2, 2, 'DIGIT'()), 'SP'(),
			   month(), 'SP'(), '__repeat'(4, 4, 'DIGIT'())]),
	    __P(T)
    end.

timex() ->
    fun (T) ->
	    __P = '__seq'(['__repeat'(2, 2, 'DIGIT'()),
			   fun (<<58, Tl/binary>>) -> {ok, 58, Tl};
			       (_) -> fail
			   end,
			   '__repeat'(2, 2, 'DIGIT'()),
			   fun (<<58, Tl/binary>>) -> {ok, 58, Tl};
			       (_) -> fail
			   end,
			   '__repeat'(2, 2, 'DIGIT'())]),
	    __P(T)
    end.

wkday() ->
    fun (T) ->
	    __P = '__alt'([fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 109) or (C1 == 77),
					(C2 == 111) or (C2 == 79), (C3 == 110) or (C3 == 78) ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 116) or (C1 == 84),
					(C2 == 117) or (C2 == 85), (C3 == 101) or (C3 == 69) ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 119) or (C1 == 87),
					(C2 == 101) or (C2 == 69), (C3 == 100) or (C3 == 68) ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 116) or (C1 == 84),
					(C2 == 104) or (C2 == 72), (C3 == 117) or (C3 == 85) ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 102) or (C1 == 70),
					(C2 == 114) or (C2 == 82), (C3 == 105) or (C3 == 73) ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 115) or (C1 == 83),
					(C2 == 97) or (C2 == 65), (C3 == 116) or (C3 == 84) ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 115) or (C1 == 83),
					(C2 == 117) or (C2 == 85), (C3 == 110) or (C3 == 78) ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end]),
	    __P(T)
    end.

month() ->
    fun (T) ->
	    __P = '__alt'([fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 106) or (C1 == 74),
					(C2 == 97) or (C2 == 65), (C3 == 110) or (C3 == 78) ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 102) or (C1 == 70),
					(C2 == 101) or (C2 == 69), (C3 == 98) or (C3 == 66) ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 109) or (C1 == 77),
					(C2 == 97) or (C2 == 65), (C3 == 114) or (C3 == 82) ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 97) or (C1 == 65),
					(C2 == 112) or (C2 == 80), (C3 == 114) or (C3 == 82) ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 109) or (C1 == 77),
					(C2 == 97) or (C2 == 65), (C3 == 121) or (C3 == 89) ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 106) or (C1 == 74),
					(C2 == 117) or (C2 == 85), (C3 == 110) or (C3 == 78) ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 106) or (C1 == 74),
					(C2 == 117) or (C2 == 85), (C3 == 108) or (C3 == 76) ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 97) or (C1 == 65),
					(C2 == 117) or (C2 == 85), (C3 == 103) or (C3 == 71) ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 115) or (C1 == 83),
					(C2 == 101) or (C2 == 69), (C3 == 112) or (C3 == 80) ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 111) or (C1 == 79),
					(C2 == 99) or (C2 == 67), (C3 == 116) or (C3 == 84) ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 110) or (C1 == 78),
					(C2 == 111) or (C2 == 79), (C3 == 118) or (C3 == 86) ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 100) or (C1 == 68),
					(C2 == 101) or (C2 == 69), (C3 == 99) or (C3 == 67) ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end]),
	    __P(T)
    end.

'Error-Info'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
				  C9, C10, Tl/binary>>)
				   when (C1 == 101) or (C1 == 69),
					(C2 == 114) or (C2 == 82), (C3 == 114) or (C3 == 82),
					(C4 == 111) or (C4 == 79), (C5 == 114) or (C5 == 82),
					C6 == 45, (C7 == 105) or (C7 == 73),
					(C8 == 110) or (C8 == 78), (C9 == 102) or (C9 == 70),
					(C10 == 111) or (C10 == 79) ->
				   {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10], Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(), 'error-uri'(),
			   '__repeat'(0, infinity,
				      '__seq'(['COMMA'(), 'error-uri'()]))]),
	    __P(T)
    end.

'error-uri'() ->
    fun (T) ->
	    __P = '__seq'(['LAQUOT'(), absoluteURI(), 'RAQUOT'(),
			   '__repeat'(0, infinity,
				      '__seq'(['SEMI'(), 'generic-param'()]))]),
	    __P(T)
    end.

'Expires'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7,
				  Tl/binary>>)
				   when (C1 == 101) or (C1 == 69),
					(C2 == 120) or (C2 == 88), (C3 == 112) or (C3 == 80),
					(C4 == 105) or (C4 == 73), (C5 == 114) or (C5 == 82),
					(C6 == 101) or (C6 == 69), (C7 == 115) or (C7 == 83) ->
				   {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(), 'delta-seconds'()]),
	    __P(T)
    end.

'From'() ->
    fun (T) ->
	    __P = '__seq'(['__alt'([fun (<<C1, C2, C3, C4,
					   Tl/binary>>)
					    when (C1 == 102) or (C1 == 70),
						 (C2 == 114) or (C2 == 82),
						 (C3 == 111) or (C3 == 79),
						 (C4 == 109) or (C4 == 77) ->
					    {ok, [C1, C2, C3, C4], Tl};
					(_) -> fail
				    end,
				    fun (<<C, Tl/binary>>) when C == 102 -> {ok, C, Tl};
					(<<C, Tl/binary>>) when C == 70 -> {ok, C, Tl};
					(_) -> fail
				    end]),
			   'HCOLON'(), 'from-spec'()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try {'From', _YY3} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'from-spec'() ->
    fun (T) ->
	    __P = '__seq'(['__alt'(['name-addr'(), 'addr-spec'()]),
			   '__repeat'(0, infinity,
				      '__seq'(['SEMI'(), 'from-param'()]))]),
	    case __P(T) of
	      {ok, [_YY1, _YY2] = _YY, _T1} ->
		  try {'from-spec', _YY1, [P || ['SEMI', P] <- _YY2]} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'from-param'() ->
    fun (T) ->
	    __P = '__alt'(['tag-param'(), 'generic-param'()]),
	    __P(T)
    end.

'tag-param'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 116) or (C1 == 84),
					(C2 == 97) or (C2 == 65), (C3 == 103) or (C3 == 71) ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   'EQUAL'(), token()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try {tag, _YY3} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'In-Reply-To'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
				  C9, C10, C11, Tl/binary>>)
				   when (C1 == 105) or (C1 == 73),
					(C2 == 110) or (C2 == 78), C3 == 45,
					(C4 == 114) or (C4 == 82), (C5 == 101) or (C5 == 69),
					(C6 == 112) or (C6 == 80), (C7 == 108) or (C7 == 76),
					(C8 == 121) or (C8 == 89), C9 == 45,
					(C10 == 116) or (C10 == 84),
					(C11 == 111) or (C11 == 79) ->
				   {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11],
				    Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(), callid(),
			   '__repeat'(0, infinity,
				      '__seq'(['COMMA'(), callid()]))]),
	    __P(T)
    end.

'Max-Forwards'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
				  C9, C10, C11, C12, Tl/binary>>)
				   when (C1 == 109) or (C1 == 77),
					(C2 == 97) or (C2 == 65), (C3 == 120) or (C3 == 88),
					C4 == 45, (C5 == 102) or (C5 == 70),
					(C6 == 111) or (C6 == 79), (C7 == 114) or (C7 == 82),
					(C8 == 119) or (C8 == 87), (C9 == 97) or (C9 == 65),
					(C10 == 114) or (C10 == 82),
					(C11 == 100) or (C11 == 68),
					(C12 == 115) or (C12 == 83) ->
				   {ok,
				    [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12],
				    Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(), '__repeat'(1, infinity, 'DIGIT'())]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try {'Max-Forwards', list_to_integer(_YY3)} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'MIME-Version'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
				  C9, C10, C11, C12, Tl/binary>>)
				   when (C1 == 109) or (C1 == 77),
					(C2 == 105) or (C2 == 73), (C3 == 109) or (C3 == 77),
					(C4 == 101) or (C4 == 69), C5 == 45,
					(C6 == 118) or (C6 == 86), (C7 == 101) or (C7 == 69),
					(C8 == 114) or (C8 == 82), (C9 == 115) or (C9 == 83),
					(C10 == 105) or (C10 == 73),
					(C11 == 111) or (C11 == 79),
					(C12 == 110) or (C12 == 78) ->
				   {ok,
				    [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12],
				    Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(), '__repeat'(1, infinity, 'DIGIT'()),
			   fun (<<46, Tl/binary>>) -> {ok, 46, Tl};
			       (_) -> fail
			   end,
			   '__repeat'(1, infinity, 'DIGIT'())]),
	    __P(T)
    end.

'Min-Expires'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
				  C9, C10, C11, Tl/binary>>)
				   when (C1 == 109) or (C1 == 77),
					(C2 == 105) or (C2 == 73), (C3 == 110) or (C3 == 78),
					C4 == 45, (C5 == 101) or (C5 == 69),
					(C6 == 120) or (C6 == 88), (C7 == 112) or (C7 == 80),
					(C8 == 105) or (C8 == 73), (C9 == 114) or (C9 == 82),
					(C10 == 101) or (C10 == 69),
					(C11 == 115) or (C11 == 83) ->
				   {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11],
				    Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(), 'delta-seconds'()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try {'Min-Expires', _YY3} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'Organization'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
				  C9, C10, C11, C12, Tl/binary>>)
				   when (C1 == 111) or (C1 == 79),
					(C2 == 114) or (C2 == 82), (C3 == 103) or (C3 == 71),
					(C4 == 97) or (C4 == 65), (C5 == 110) or (C5 == 78),
					(C6 == 105) or (C6 == 73), (C7 == 122) or (C7 == 90),
					(C8 == 97) or (C8 == 65), (C9 == 116) or (C9 == 84),
					(C10 == 105) or (C10 == 73),
					(C11 == 111) or (C11 == 79),
					(C12 == 110) or (C12 == 78) ->
				   {ok,
				    [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12],
				    Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(), '__repeat'(0, 1, 'TEXT-UTF8-TRIM'())]),
	    __P(T)
    end.

'Priority'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
				  Tl/binary>>)
				   when (C1 == 112) or (C1 == 80),
					(C2 == 114) or (C2 == 82), (C3 == 105) or (C3 == 73),
					(C4 == 111) or (C4 == 79), (C5 == 114) or (C5 == 82),
					(C6 == 105) or (C6 == 73), (C7 == 116) or (C7 == 84),
					(C8 == 121) or (C8 == 89) ->
				   {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(), 'priority-value'()]),
	    __P(T)
    end.

'priority-value'() ->
    fun (T) ->
	    __P = '__alt'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
				  C9, Tl/binary>>)
				   when (C1 == 101) or (C1 == 69),
					(C2 == 109) or (C2 == 77), (C3 == 101) or (C3 == 69),
					(C4 == 114) or (C4 == 82), (C5 == 103) or (C5 == 71),
					(C6 == 101) or (C6 == 69), (C7 == 110) or (C7 == 78),
					(C8 == 99) or (C8 == 67), (C9 == 121) or (C9 == 89) ->
				   {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, C4, C5, C6, Tl/binary>>)
				   when (C1 == 117) or (C1 == 85),
					(C2 == 114) or (C2 == 82), (C3 == 103) or (C3 == 71),
					(C4 == 101) or (C4 == 69), (C5 == 110) or (C5 == 78),
					(C6 == 116) or (C6 == 84) ->
				   {ok, [C1, C2, C3, C4, C5, C6], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, C4, C5, C6, Tl/binary>>)
				   when (C1 == 110) or (C1 == 78),
					(C2 == 111) or (C2 == 79), (C3 == 114) or (C3 == 82),
					(C4 == 109) or (C4 == 77), (C5 == 97) or (C5 == 65),
					(C6 == 108) or (C6 == 76) ->
				   {ok, [C1, C2, C3, C4, C5, C6], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, C4, C5, C6, C7, C8, C9, C10,
				  Tl/binary>>)
				   when (C1 == 110) or (C1 == 78),
					(C2 == 111) or (C2 == 79), (C3 == 110) or (C3 == 78),
					C4 == 45, (C5 == 117) or (C5 == 85),
					(C6 == 114) or (C6 == 82), (C7 == 103) or (C7 == 71),
					(C8 == 101) or (C8 == 69), (C9 == 110) or (C9 == 78),
					(C10 == 116) or (C10 == 84) ->
				   {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10], Tl};
			       (_) -> fail
			   end,
			   'other-priority'()]),
	    __P(T)
    end.

'other-priority'() ->
    fun (T) -> __P = token(), __P(T) end.

'Proxy-Authenticate'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
				  C9, C10, C11, C12, C13, C14, C15, C16, C17, C18,
				  Tl/binary>>)
				   when (C1 == 112) or (C1 == 80),
					(C2 == 114) or (C2 == 82), (C3 == 111) or (C3 == 79),
					(C4 == 120) or (C4 == 88), (C5 == 121) or (C5 == 89),
					C6 == 45, (C7 == 97) or (C7 == 65),
					(C8 == 117) or (C8 == 85), (C9 == 116) or (C9 == 84),
					(C10 == 104) or (C10 == 72),
					(C11 == 101) or (C11 == 69),
					(C12 == 110) or (C12 == 78),
					(C13 == 116) or (C13 == 84),
					(C14 == 105) or (C14 == 73),
					(C15 == 99) or (C15 == 67), (C16 == 97) or (C16 == 65),
					(C17 == 116) or (C17 == 84),
					(C18 == 101) or (C18 == 69) ->
				   {ok,
				    [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13,
				     C14, C15, C16, C17, C18],
				    Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(), challenge()]),
	    __P(T)
    end.

challenge() ->
    fun (T) ->
	    __P = '__alt'(['__seq'([fun (<<C1, C2, C3, C4, C5, C6,
					   Tl/binary>>)
					    when (C1 == 100) or (C1 == 68),
						 (C2 == 105) or (C2 == 73),
						 (C3 == 103) or (C3 == 71),
						 (C4 == 101) or (C4 == 69),
						 (C5 == 115) or (C5 == 83),
						 (C6 == 116) or (C6 == 84) ->
					    {ok, [C1, C2, C3, C4, C5, C6], Tl};
					(_) -> fail
				    end,
				    'LWS'(), 'digest-cln'(),
				    '__repeat'(0, infinity,
					       '__seq'(['COMMA'(), 'digest-cln'()]))]),
			   'other-challenge'()]),
	    __P(T)
    end.

'other-challenge'() ->
    fun (T) ->
	    __P = '__seq'(['auth-scheme'(), 'LWS'(), 'auth-param'(),
			   '__repeat'(0, infinity,
				      '__seq'(['COMMA'(), 'auth-param'()]))]),
	    __P(T)
    end.

'digest-cln'() ->
    fun (T) ->
	    __P = '__alt'([realm(), domain(), nonce(), opaque(),
			   stale(), algorithm(), 'qop-options'(), 'auth-param'()]),
	    __P(T)
    end.

realm() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, Tl/binary>>)
				   when (C1 == 114) or (C1 == 82),
					(C2 == 101) or (C2 == 69), (C3 == 97) or (C3 == 65),
					(C4 == 108) or (C4 == 76), (C5 == 109) or (C5 == 77) ->
				   {ok, [C1, C2, C3, C4, C5], Tl};
			       (_) -> fail
			   end,
			   'EQUAL'(), 'realm-value'()]),
	    __P(T)
    end.

'realm-value'() ->
    fun (T) -> __P = 'quoted-string'(), __P(T) end.

domain() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6,
				  Tl/binary>>)
				   when (C1 == 100) or (C1 == 68),
					(C2 == 111) or (C2 == 79), (C3 == 109) or (C3 == 77),
					(C4 == 97) or (C4 == 65), (C5 == 105) or (C5 == 73),
					(C6 == 110) or (C6 == 78) ->
				   {ok, [C1, C2, C3, C4, C5, C6], Tl};
			       (_) -> fail
			   end,
			   'EQUAL'(), 'LDQUOT'(), 'URI'(),
			   '__repeat'(0, infinity,
				      '__seq'(['__repeat'(1, infinity, 'SP'()), 'URI'()])),
			   'RDQUOT'()]),
	    __P(T)
    end.

'URI'() ->
    fun (T) ->
	    __P = '__alt'([absoluteURI(), 'abs-path'()]), __P(T)
    end.

nonce() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, Tl/binary>>)
				   when (C1 == 110) or (C1 == 78),
					(C2 == 111) or (C2 == 79), (C3 == 110) or (C3 == 78),
					(C4 == 99) or (C4 == 67), (C5 == 101) or (C5 == 69) ->
				   {ok, [C1, C2, C3, C4, C5], Tl};
			       (_) -> fail
			   end,
			   'EQUAL'(), 'nonce-value'()]),
	    __P(T)
    end.

'nonce-value'() ->
    fun (T) -> __P = 'quoted-string'(), __P(T) end.

opaque() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6,
				  Tl/binary>>)
				   when (C1 == 111) or (C1 == 79),
					(C2 == 112) or (C2 == 80), (C3 == 97) or (C3 == 65),
					(C4 == 113) or (C4 == 81), (C5 == 117) or (C5 == 85),
					(C6 == 101) or (C6 == 69) ->
				   {ok, [C1, C2, C3, C4, C5, C6], Tl};
			       (_) -> fail
			   end,
			   'EQUAL'(), 'quoted-string'()]),
	    __P(T)
    end.

stale() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, Tl/binary>>)
				   when (C1 == 115) or (C1 == 83),
					(C2 == 116) or (C2 == 84), (C3 == 97) or (C3 == 65),
					(C4 == 108) or (C4 == 76), (C5 == 101) or (C5 == 69) ->
				   {ok, [C1, C2, C3, C4, C5], Tl};
			       (_) -> fail
			   end,
			   'EQUAL'(),
			   '__alt'([fun (<<C1, C2, C3, C4, Tl/binary>>)
					    when (C1 == 116) or (C1 == 84),
						 (C2 == 114) or (C2 == 82),
						 (C3 == 117) or (C3 == 85),
						 (C4 == 101) or (C4 == 69) ->
					    {ok, [C1, C2, C3, C4], Tl};
					(_) -> fail
				    end,
				    fun (<<C1, C2, C3, C4, C5, Tl/binary>>)
					    when (C1 == 102) or (C1 == 70),
						 (C2 == 97) or (C2 == 65),
						 (C3 == 108) or (C3 == 76),
						 (C4 == 115) or (C4 == 83),
						 (C5 == 101) or (C5 == 69) ->
					    {ok, [C1, C2, C3, C4, C5], Tl};
					(_) -> fail
				    end])]),
	    __P(T)
    end.

algorithm() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
				  C9, Tl/binary>>)
				   when (C1 == 97) or (C1 == 65),
					(C2 == 108) or (C2 == 76), (C3 == 103) or (C3 == 71),
					(C4 == 111) or (C4 == 79), (C5 == 114) or (C5 == 82),
					(C6 == 105) or (C6 == 73), (C7 == 116) or (C7 == 84),
					(C8 == 104) or (C8 == 72), (C9 == 109) or (C9 == 77) ->
				   {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
			       (_) -> fail
			   end,
			   'EQUAL'(),
			   '__alt'([fun (<<C1, C2, C3, Tl/binary>>)
					    when (C1 == 109) or (C1 == 77),
						 (C2 == 100) or (C2 == 68), C3 == 53 ->
					    {ok, [C1, C2, C3], Tl};
					(_) -> fail
				    end,
				    fun (<<C1, C2, C3, C4, C5, C6, C7, C8, Tl/binary>>)
					    when (C1 == 109) or (C1 == 77),
						 (C2 == 100) or (C2 == 68), C3 == 53, C4 == 45,
						 (C5 == 115) or (C5 == 83),
						 (C6 == 101) or (C6 == 69),
						 (C7 == 115) or (C7 == 83),
						 (C8 == 115) or (C8 == 83) ->
					    {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
					(_) -> fail
				    end,
				    token()])]),
	    __P(T)
    end.

'qop-options'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 113) or (C1 == 81),
					(C2 == 111) or (C2 == 79), (C3 == 112) or (C3 == 80) ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   'EQUAL'(), 'LDQUOT'(), 'qop-value'(),
			   '__repeat'(0, infinity,
				      '__seq'([fun (<<44, Tl/binary>>) -> {ok, 44, Tl};
						   (_) -> fail
					       end,
					       'qop-value'()])),
			   'RDQUOT'()]),
	    __P(T)
    end.

'qop-value'() ->
    fun (T) ->
	    __P = '__alt'([fun (<<C1, C2, C3, C4, Tl/binary>>)
				   when (C1 == 97) or (C1 == 65),
					(C2 == 117) or (C2 == 85), (C3 == 116) or (C3 == 84),
					(C4 == 104) or (C4 == 72) ->
				   {ok, [C1, C2, C3, C4], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, C4, C5, C6, C7, C8, Tl/binary>>)
				   when (C1 == 97) or (C1 == 65),
					(C2 == 117) or (C2 == 85), (C3 == 116) or (C3 == 84),
					(C4 == 104) or (C4 == 72), C5 == 45,
					(C6 == 105) or (C6 == 73), (C7 == 110) or (C7 == 78),
					(C8 == 116) or (C8 == 84) ->
				   {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
			       (_) -> fail
			   end,
			   token()]),
	    __P(T)
    end.

'Proxy-Authorization'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
				  C9, C10, C11, C12, C13, C14, C15, C16, C17, C18, C19,
				  Tl/binary>>)
				   when (C1 == 112) or (C1 == 80),
					(C2 == 114) or (C2 == 82), (C3 == 111) or (C3 == 79),
					(C4 == 120) or (C4 == 88), (C5 == 121) or (C5 == 89),
					C6 == 45, (C7 == 97) or (C7 == 65),
					(C8 == 117) or (C8 == 85), (C9 == 116) or (C9 == 84),
					(C10 == 104) or (C10 == 72),
					(C11 == 111) or (C11 == 79),
					(C12 == 114) or (C12 == 82),
					(C13 == 105) or (C13 == 73),
					(C14 == 122) or (C14 == 90),
					(C15 == 97) or (C15 == 65),
					(C16 == 116) or (C16 == 84),
					(C17 == 105) or (C17 == 73),
					(C18 == 111) or (C18 == 79),
					(C19 == 110) or (C19 == 78) ->
				   {ok,
				    [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13,
				     C14, C15, C16, C17, C18, C19],
				    Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(), credentials()]),
	    __P(T)
    end.

'Proxy-Require'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
				  C9, C10, C11, C12, C13, Tl/binary>>)
				   when (C1 == 112) or (C1 == 80),
					(C2 == 114) or (C2 == 82), (C3 == 111) or (C3 == 79),
					(C4 == 120) or (C4 == 88), (C5 == 121) or (C5 == 89),
					C6 == 45, (C7 == 114) or (C7 == 82),
					(C8 == 101) or (C8 == 69), (C9 == 113) or (C9 == 81),
					(C10 == 117) or (C10 == 85),
					(C11 == 105) or (C11 == 73),
					(C12 == 114) or (C12 == 82),
					(C13 == 101) or (C13 == 69) ->
				   {ok,
				    [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12,
				     C13],
				    Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(), 'option-tag'(),
			   '__repeat'(0, infinity,
				      '__seq'(['COMMA'(), 'option-tag'()]))]),
	    __P(T)
    end.

'option-tag'() -> fun (T) -> __P = token(), __P(T) end.

'Record-Route'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
				  C9, C10, C11, C12, Tl/binary>>)
				   when (C1 == 114) or (C1 == 82),
					(C2 == 101) or (C2 == 69), (C3 == 99) or (C3 == 67),
					(C4 == 111) or (C4 == 79), (C5 == 114) or (C5 == 82),
					(C6 == 100) or (C6 == 68), C7 == 45,
					(C8 == 114) or (C8 == 82), (C9 == 111) or (C9 == 79),
					(C10 == 117) or (C10 == 85),
					(C11 == 116) or (C11 == 84),
					(C12 == 101) or (C12 == 69) ->
				   {ok,
				    [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12],
				    Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(), 'rec-route'(),
			   '__repeat'(0, infinity,
				      '__seq'(['COMMA'(), 'rec-route'()]))]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3, _YY4] = _YY, _T1} ->
		  try {'Record-Route',
		       [_YY3 | [RR || ['COMMA', RR] <- _YY4]]}
		  of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'rec-route'() ->
    fun (T) ->
	    __P = '__seq'(['name-addr'(),
			   '__repeat'(0, infinity,
				      '__seq'(['SEMI'(), 'rr-param'()]))]),
	    __P(T)
    end.

'rr-param'() ->
    fun (T) -> __P = 'generic-param'(), __P(T) end.

'Reply-To'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
				  Tl/binary>>)
				   when (C1 == 114) or (C1 == 82),
					(C2 == 101) or (C2 == 69), (C3 == 112) or (C3 == 80),
					(C4 == 108) or (C4 == 76), (C5 == 121) or (C5 == 89),
					C6 == 45, (C7 == 116) or (C7 == 84),
					(C8 == 111) or (C8 == 79) ->
				   {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(), 'rplyto-spec'()]),
	    __P(T)
    end.

'rplyto-spec'() ->
    fun (T) ->
	    __P = '__seq'(['__alt'(['name-addr'(), 'addr-spec'()]),
			   '__repeat'(0, infinity,
				      '__seq'(['SEMI'(), 'rplyto-param'()]))]),
	    __P(T)
    end.

'rplyto-param'() ->
    fun (T) -> __P = 'generic-param'(), __P(T) end.

'Require'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7,
				  Tl/binary>>)
				   when (C1 == 114) or (C1 == 82),
					(C2 == 101) or (C2 == 69), (C3 == 113) or (C3 == 81),
					(C4 == 117) or (C4 == 85), (C5 == 105) or (C5 == 73),
					(C6 == 114) or (C6 == 82), (C7 == 101) or (C7 == 69) ->
				   {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(), 'option-tag'(),
			   '__repeat'(0, infinity,
				      '__seq'(['COMMA'(), 'option-tag'()]))]),
	    __P(T)
    end.

'Retry-After'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
				  C9, C10, C11, Tl/binary>>)
				   when (C1 == 114) or (C1 == 82),
					(C2 == 101) or (C2 == 69), (C3 == 116) or (C3 == 84),
					(C4 == 114) or (C4 == 82), (C5 == 121) or (C5 == 89),
					C6 == 45, (C7 == 97) or (C7 == 65),
					(C8 == 102) or (C8 == 70), (C9 == 116) or (C9 == 84),
					(C10 == 101) or (C10 == 69),
					(C11 == 114) or (C11 == 82) ->
				   {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11],
				    Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(), 'delta-seconds'(),
			   '__repeat'(0, 1, comment()),
			   '__repeat'(0, infinity,
				      '__seq'(['SEMI'(), 'retry-param'()]))]),
	    __P(T)
    end.

'retry-param'() ->
    fun (T) ->
	    __P = '__alt'(['__seq'([fun (<<C1, C2, C3, C4, C5, C6,
					   C7, C8, Tl/binary>>)
					    when (C1 == 100) or (C1 == 68),
						 (C2 == 117) or (C2 == 85),
						 (C3 == 114) or (C3 == 82),
						 (C4 == 97) or (C4 == 65),
						 (C5 == 116) or (C5 == 84),
						 (C6 == 105) or (C6 == 73),
						 (C7 == 111) or (C7 == 79),
						 (C8 == 110) or (C8 == 78) ->
					    {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
					(_) -> fail
				    end,
				    'EQUAL'(), 'delta-seconds'()]),
			   'generic-param'()]),
	    __P(T)
    end.

'Route'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, Tl/binary>>)
				   when (C1 == 114) or (C1 == 82),
					(C2 == 111) or (C2 == 79), (C3 == 117) or (C3 == 85),
					(C4 == 116) or (C4 == 84), (C5 == 101) or (C5 == 69) ->
				   {ok, [C1, C2, C3, C4, C5], Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(), 'route-param'(),
			   '__repeat'(0, infinity,
				      '__seq'(['COMMA'(), 'route-param'()]))]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3, _YY4] = _YY, _T1} ->
		  try {'Route', [_YY3 | [P || ['COMMA', P] <- _YY4]]} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'route-param'() ->
    fun (T) ->
	    __P = '__seq'(['name-addr'(),
			   '__repeat'(0, infinity,
				      '__seq'(['SEMI'(), 'rr-param'()]))]),
	    case __P(T) of
	      {ok, [_YY1, _YY2] = _YY, _T1} ->
		  try {'route-param', _YY1, [P || ['SEMI', P] <- _YY2]} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'Server'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6,
				  Tl/binary>>)
				   when (C1 == 115) or (C1 == 83),
					(C2 == 101) or (C2 == 69), (C3 == 114) or (C3 == 82),
					(C4 == 118) or (C4 == 86), (C5 == 101) or (C5 == 69),
					(C6 == 114) or (C6 == 82) ->
				   {ok, [C1, C2, C3, C4, C5, C6], Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(), 'server-val'(),
			   '__repeat'(0, infinity,
				      '__seq'(['LWS'(), 'server-val'()]))]),
	    __P(T)
    end.

'server-val'() ->
    fun (T) -> __P = '__alt'([product(), comment()]), __P(T)
    end.

product() ->
    fun (T) ->
	    __P = '__seq'([token(),
			   '__repeat'(0, 1,
				      '__seq'(['SLASH'(), 'product-version'()]))]),
	    __P(T)
    end.

'product-version'() ->
    fun (T) -> __P = token(), __P(T) end.

'Subject'() ->
    fun (T) ->
	    __P = '__seq'(['__alt'([fun (<<C1, C2, C3, C4, C5, C6,
					   C7, Tl/binary>>)
					    when (C1 == 115) or (C1 == 83),
						 (C2 == 117) or (C2 == 85),
						 (C3 == 98) or (C3 == 66),
						 (C4 == 106) or (C4 == 74),
						 (C5 == 101) or (C5 == 69),
						 (C6 == 99) or (C6 == 67),
						 (C7 == 116) or (C7 == 84) ->
					    {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
					(_) -> fail
				    end,
				    fun (<<C, Tl/binary>>) when C == 115 -> {ok, C, Tl};
					(<<C, Tl/binary>>) when C == 83 -> {ok, C, Tl};
					(_) -> fail
				    end]),
			   'HCOLON'(), '__repeat'(0, 1, 'TEXT-UTF8-TRIM'())]),
	    __P(T)
    end.

'Supported'() ->
    fun (T) ->
	    __P = '__seq'(['__alt'([fun (<<C1, C2, C3, C4, C5, C6,
					   C7, C8, C9, Tl/binary>>)
					    when (C1 == 115) or (C1 == 83),
						 (C2 == 117) or (C2 == 85),
						 (C3 == 112) or (C3 == 80),
						 (C4 == 112) or (C4 == 80),
						 (C5 == 111) or (C5 == 79),
						 (C6 == 114) or (C6 == 82),
						 (C7 == 116) or (C7 == 84),
						 (C8 == 101) or (C8 == 69),
						 (C9 == 100) or (C9 == 68) ->
					    {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
					(_) -> fail
				    end,
				    fun (<<C, Tl/binary>>) when C == 107 -> {ok, C, Tl};
					(<<C, Tl/binary>>) when C == 75 -> {ok, C, Tl};
					(_) -> fail
				    end]),
			   'HCOLON'(),
			   '__repeat'(0, 1,
				      '__seq'(['option-tag'(),
					       '__repeat'(0, infinity,
							  '__seq'(['COMMA'(),
								   'option-tag'()]))]))]),
	    __P(T)
    end.

'Timestamp'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
				  C9, Tl/binary>>)
				   when (C1 == 116) or (C1 == 84),
					(C2 == 105) or (C2 == 73), (C3 == 109) or (C3 == 77),
					(C4 == 101) or (C4 == 69), (C5 == 115) or (C5 == 83),
					(C6 == 116) or (C6 == 84), (C7 == 97) or (C7 == 65),
					(C8 == 109) or (C8 == 77), (C9 == 112) or (C9 == 80) ->
				   {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9], Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(), '__repeat'(1, infinity, 'DIGIT'()),
			   '__repeat'(0, 1,
				      '__seq'([fun (<<46, Tl/binary>>) -> {ok, 46, Tl};
						   (_) -> fail
					       end,
					       '__repeat'(0, infinity, 'DIGIT'())])),
			   '__repeat'(0, 1, '__seq'(['LWS'(), delay()]))]),
	    __P(T)
    end.

delay() ->
    fun (T) ->
	    __P = '__seq'(['__repeat'(0, infinity, 'DIGIT'()),
			   '__repeat'(0, 1,
				      '__seq'([fun (<<46, Tl/binary>>) -> {ok, 46, Tl};
						   (_) -> fail
					       end,
					       '__repeat'(0, infinity, 'DIGIT'())]))]),
	    __P(T)
    end.

'To'() ->
    fun (T) ->
	    __P = '__seq'(['__alt'([fun (<<C1, C2, Tl/binary>>)
					    when (C1 == 116) or (C1 == 84),
						 (C2 == 111) or (C2 == 79) ->
					    {ok, [C1, C2], Tl};
					(_) -> fail
				    end,
				    fun (<<C, Tl/binary>>) when C == 116 -> {ok, C, Tl};
					(<<C, Tl/binary>>) when C == 84 -> {ok, C, Tl};
					(_) -> fail
				    end]),
			   'HCOLON'(), '__alt'(['name-addr'(), 'addr-spec'()]),
			   '__repeat'(0, infinity,
				      '__seq'(['SEMI'(), 'to-param'()]))]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3, _YY4] = _YY, _T1} ->
		  try {'To', _YY3, [P || [_, P] <- _YY4]} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'to-param'() ->
    fun (T) ->
	    __P = '__alt'(['tag-param'(), 'generic-param'()]),
	    __P(T)
    end.

'Unsupported'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
				  C9, C10, C11, Tl/binary>>)
				   when (C1 == 117) or (C1 == 85),
					(C2 == 110) or (C2 == 78), (C3 == 115) or (C3 == 83),
					(C4 == 117) or (C4 == 85), (C5 == 112) or (C5 == 80),
					(C6 == 112) or (C6 == 80), (C7 == 111) or (C7 == 79),
					(C8 == 114) or (C8 == 82), (C9 == 116) or (C9 == 84),
					(C10 == 101) or (C10 == 69),
					(C11 == 100) or (C11 == 68) ->
				   {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11],
				    Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(), 'option-tag'(),
			   '__repeat'(0, infinity,
				      '__seq'(['COMMA'(), 'option-tag'()]))]),
	    __P(T)
    end.

'User-Agent'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
				  C9, C10, Tl/binary>>)
				   when (C1 == 117) or (C1 == 85),
					(C2 == 115) or (C2 == 83), (C3 == 101) or (C3 == 69),
					(C4 == 114) or (C4 == 82), C5 == 45,
					(C6 == 97) or (C6 == 65), (C7 == 103) or (C7 == 71),
					(C8 == 101) or (C8 == 69), (C9 == 110) or (C9 == 78),
					(C10 == 116) or (C10 == 84) ->
				   {ok, [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10], Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(), 'server-val'(),
			   '__repeat'(0, infinity,
				      '__seq'(['LWS'(), 'server-val'()]))]),
	    __P(T)
    end.

'Via'() ->
    fun (T) ->
	    __P = '__seq'(['__alt'([fun (<<C1, C2, C3, Tl/binary>>)
					    when (C1 == 118) or (C1 == 86),
						 (C2 == 105) or (C2 == 73),
						 (C3 == 97) or (C3 == 65) ->
					    {ok, [C1, C2, C3], Tl};
					(_) -> fail
				    end,
				    fun (<<C, Tl/binary>>) when C == 118 -> {ok, C, Tl};
					(<<C, Tl/binary>>) when C == 86 -> {ok, C, Tl};
					(_) -> fail
				    end]),
			   'HCOLON'(), 'via-parm'(),
			   '__repeat'(0, infinity,
				      '__seq'(['COMMA'(), 'via-parm'()]))]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3, _YY4] = _YY, _T1} ->
		  try {'Via', [_YY3 | [VP || ['COMMA', VP] <- _YY4]]} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'via-parm'() ->
    fun (T) ->
	    __P = '__seq'(['sent-protocol'(), 'LWS'(), 'sent-by'(),
			   '__repeat'(0, infinity,
				      '__seq'(['SEMI'(), 'via-params'()]))]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3, _YY4] = _YY, _T1} ->
		  try {'via-parm', _YY1, _YY3, [P || ['SEMI', P] <- _YY4]}
		  of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'via-params'() ->
    fun (T) ->
	    __P = '__alt'(['via-ttl'(), 'via-maddr'(),
			   'via-received'(), 'via-branch'(), 'via-extension'()]),
	    __P(T)
    end.

'via-ttl'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 116) or (C1 == 84),
					(C2 == 116) or (C2 == 84), (C3 == 108) or (C3 == 76) ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   'EQUAL'(), ttl()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try {'via-ttl', _YY3} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'via-maddr'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, Tl/binary>>)
				   when (C1 == 109) or (C1 == 77),
					(C2 == 97) or (C2 == 65), (C3 == 100) or (C3 == 68),
					(C4 == 100) or (C4 == 68), (C5 == 114) or (C5 == 82) ->
				   {ok, [C1, C2, C3, C4, C5], Tl};
			       (_) -> fail
			   end,
			   'EQUAL'(), host()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try {'via-maddr', _YY3} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'via-received'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
				  Tl/binary>>)
				   when (C1 == 114) or (C1 == 82),
					(C2 == 101) or (C2 == 69), (C3 == 99) or (C3 == 67),
					(C4 == 101) or (C4 == 69), (C5 == 105) or (C5 == 73),
					(C6 == 118) or (C6 == 86), (C7 == 101) or (C7 == 69),
					(C8 == 100) or (C8 == 68) ->
				   {ok, [C1, C2, C3, C4, C5, C6, C7, C8], Tl};
			       (_) -> fail
			   end,
			   'EQUAL'(),
			   '__alt'(['IPv4address'(), 'IPv6address'()])]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try {'via-received', _YY3} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'via-branch'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6,
				  Tl/binary>>)
				   when (C1 == 98) or (C1 == 66),
					(C2 == 114) or (C2 == 82), (C3 == 97) or (C3 == 65),
					(C4 == 110) or (C4 == 78), (C5 == 99) or (C5 == 67),
					(C6 == 104) or (C6 == 72) ->
				   {ok, [C1, C2, C3, C4, C5, C6], Tl};
			       (_) -> fail
			   end,
			   'EQUAL'(), token()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try {'via-branch', _YY3} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'via-extension'() ->
    fun (T) -> __P = 'generic-param'(), __P(T) end.

'sent-protocol'() ->
    fun (T) ->
	    __P = '__seq'(['protocol-name'(), 'SLASH'(),
			   'protocol-version'(), 'SLASH'(), transport()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3, _YY4, _YY5] = _YY, _T1} ->
		  try {'sent-protocol', _YY1, _YY3, _YY5} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'protocol-name'() ->
    fun (T) ->
	    __P = '__alt'([fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 115) or (C1 == 83),
					(C2 == 105) or (C2 == 73), (C3 == 112) or (C3 == 80) ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   token()]),
	    __P(T)
    end.

'protocol-version'() ->
    fun (T) -> __P = token(), __P(T) end.

transport() ->
    fun (T) ->
	    __P = '__alt'([fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 117) or (C1 == 85),
					(C2 == 100) or (C2 == 68), (C3 == 112) or (C3 == 80) ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 116) or (C1 == 84),
					(C2 == 99) or (C2 == 67), (C3 == 112) or (C3 == 80) ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, Tl/binary>>)
				   when (C1 == 116) or (C1 == 84),
					(C2 == 108) or (C2 == 76), (C3 == 115) or (C3 == 83) ->
				   {ok, [C1, C2, C3], Tl};
			       (_) -> fail
			   end,
			   fun (<<C1, C2, C3, C4, Tl/binary>>)
				   when (C1 == 115) or (C1 == 83),
					(C2 == 99) or (C2 == 67), (C3 == 116) or (C3 == 84),
					(C4 == 112) or (C4 == 80) ->
				   {ok, [C1, C2, C3, C4], Tl};
			       (_) -> fail
			   end,
			   'other-transport'()]),
	    __P(T)
    end.

'sent-by'() ->
    fun (T) ->
	    __P = '__seq'([host(),
			   '__repeat'(0, 1, '__seq'(['COLON'(), port()]))]),
	    case __P(T) of
	      {ok, [_YY1, _YY2] = _YY, _T1} ->
		  try {'sent-by', _YY1,
		       case _YY2 of
			 [] -> [];
			 [[_, Port]] -> Port
		       end}
		  of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

ttl() ->
    fun (T) -> __P = '__repeat'(1, 3, 'DIGIT'()), __P(T)
    end.

'Warning'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7,
				  Tl/binary>>)
				   when (C1 == 119) or (C1 == 87),
					(C2 == 97) or (C2 == 65), (C3 == 114) or (C3 == 82),
					(C4 == 110) or (C4 == 78), (C5 == 105) or (C5 == 73),
					(C6 == 110) or (C6 == 78), (C7 == 103) or (C7 == 71) ->
				   {ok, [C1, C2, C3, C4, C5, C6, C7], Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(), 'warning-value'(),
			   '__repeat'(0, infinity,
				      '__seq'(['COMMA'(), 'warning-value'()]))]),
	    __P(T)
    end.

'warning-value'() ->
    fun (T) ->
	    __P = '__seq'(['warn-code'(), 'SP'(), 'warn-agent'(),
			   'SP'(), 'warn-text'()]),
	    __P(T)
    end.

'warn-code'() ->
    fun (T) -> __P = '__repeat'(3, 3, 'DIGIT'()), __P(T)
    end.

'warn-agent'() ->
    fun (T) ->
	    __P = '__alt'([hostport(), pseudonym()]), __P(T)
    end.

'warn-text'() ->
    fun (T) -> __P = 'quoted-string'(), __P(T) end.

pseudonym() -> fun (T) -> __P = token(), __P(T) end.

'WWW-Authenticate'() ->
    fun (T) ->
	    __P = '__seq'([fun (<<C1, C2, C3, C4, C5, C6, C7, C8,
				  C9, C10, C11, C12, C13, C14, C15, C16, Tl/binary>>)
				   when (C1 == 119) or (C1 == 87),
					(C2 == 119) or (C2 == 87), (C3 == 119) or (C3 == 87),
					C4 == 45, (C5 == 97) or (C5 == 65),
					(C6 == 117) or (C6 == 85), (C7 == 116) or (C7 == 84),
					(C8 == 104) or (C8 == 72), (C9 == 101) or (C9 == 69),
					(C10 == 110) or (C10 == 78),
					(C11 == 116) or (C11 == 84),
					(C12 == 105) or (C12 == 73),
					(C13 == 99) or (C13 == 67), (C14 == 97) or (C14 == 65),
					(C15 == 116) or (C15 == 84),
					(C16 == 101) or (C16 == 69) ->
				   {ok,
				    [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13,
				     C14, C15, C16],
				    Tl};
			       (_) -> fail
			   end,
			   'HCOLON'(), challenge()]),
	    __P(T)
    end.

'extension-header'() ->
    fun (T) ->
	    __P = '__seq'(['header-name'(), 'HCOLON'(),
			   'header-value'()]),
	    case __P(T) of
	      {ok, [_YY1, _YY2, _YY3] = _YY, _T1} ->
		  try {'extension-header', _YY1, _YY3} of
		    __Ret -> {ok, __Ret, _T1}
		  catch
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end.

'header-name'() -> fun (T) -> __P = token(), __P(T) end.

'header-value'() ->
    fun (T) ->
	    __P = '__repeat'(0, infinity,
			     '__alt'(['TEXT-UTF8char'(), 'UTF8-CONT'(), 'LWS'()])),
	    __P(T)
    end.

'message-body'() ->
    fun (T) ->
	    __P = '__repeat'(0, infinity, 'OCTET'()), __P(T)
    end.

'__alt'([P | Ps]) ->
    fun (T) ->
	    case P(T) of
	      {ok, _R, _T1} = Res -> Res;
	      fail ->
		  case Ps of
		    [] -> fail;
		    _ -> ('__alt'(Ps))(T)
		  end
	    end
    end.

'__repeat'(Min, Max, P) -> '__repeat'(Min, Max, P, 0).

'__repeat'(Min, Max, P, Found) ->
    fun (T) ->
	    case P(T) of
	      {ok, R1, T1} when Max == Found + 1 -> {ok, [R1], T1};
	      {ok, R1, T1} ->
		  case ('__repeat'(Min, Max, P, Found + 1))(T1) of
		    {ok, R2, T2} -> {ok, [R1 | R2], T2};
		    fail when Found >= Min -> {ok, [R1], T1};
		    fail -> fail
		  end;
	      fail when Found >= Min -> {ok, [], T};
	      fail -> fail
	    end
    end.

'__seq'([P | Ps]) ->
    fun (T) ->
	    case P(T) of
	      {ok, R1, T1} ->
		  case ('__seq'(Ps))(T1) of
		    {ok, R2, T2} -> {ok, [R1 | R2], T2};
		    fail -> fail
		  end;
	      fail -> fail
	    end
    end;
'__seq'([]) -> fun (T) -> {ok, [], T} end.
